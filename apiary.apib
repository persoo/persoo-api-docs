FORMAT: 1A
HOST: http://api.persoo.cz

# Persoo administration API (next)
API for configuring Persoo accounts.

## Allowed HTTP requests

- `POST` - Creates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or a list of resources
- `DELETE` - Deletes a resource

## Typical server responses

- 200 `OK` - The request was successful (some API calls may return 201 or 204 instead).
- 201 `Created` - The request was successful, and a resource was created.
- 204 `No Content` - The request was successful, but no content is returned.
- 400 `Bad Request` - The request wasn't understood or was missing the required parameters.
- 401 `Unauthorized` - Authentication token is invalid or has expired. (Try logging in again.)
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - The requested resource wasn't found.

## Error reporting

Error responses (status 4xx/5xx) contain a detailed description of the error(s) in the following manner:
```
{
    "errors": [
        {
            "message": "Unauthorized."
        }
    ]
}
```
```
{
    "errors": [
        {
            "message": "Config structure validation: Field 'adminConfig.settings.productImport' missing.",
            "path": ["adminConfig", "settings", "productImport"]
        },
        {
            "message": "Config structure validation: Field 'adminConfig.settings.credentials[2]' isn't of type 'object'."
            "path": ["adminConfig", "settings", "credentials", 2]
        }
    ]
}
```
```
{
    "errors": [
        {
            "message": "Internal server error (ID f6429320a53711e4b0780002a5d5c51b)."
        }
    ]
}
```

# Group Users
The users are owners of accounts. Each users have unique credentials to access in system.

TODO - Dodělat, představa je taková, že requesty budeme jen přeposílat persoo-config-unitě. V reálu budou nejspíš metody trochu jiné, nebude to umět tolik, ale zhruba to tak bude.

## Login [/login]
### login [POST]
V hlavičce odpovědi nastaví cookie tak, aby další requesty mohly probíhat bez zásahu (autentizace se bere z cookie).
Token vyprší po půl hodině. S každým requestem může v odpovědi přijít aktualizovaný token.

+ Request (application/json)

    + Body
    
            {
                "username": "user@email.com",
                "passwordHash": "passwordHash"
            }

+ Response 204

    + Headers
    
            Set-Cookie:  expires=Mon, 30-Jul-2014 09:12:42 GMT; persooAuthToken={token};

+ Response 401

## Logout [/logout]
### logout [POST]
Delete cookie with token.
+ Request

    + Headers
    
            Cookie: persooAuthToken={token};
            
+ Response 204

    + Headers
    
            Set-Cookie:  expires=Thu, 01 Jan 1970 00:00:01 GMT persooAuthToken={token};

## User [/users/{username}]
A user's details.

+ Parameters

    + username (required, string, `test@email.com`) ... name of the user to perform the action on. "current" can be used for the user logged in


### getUser [GET]
Retrieve the user details by username or 'current' for currently logged user.
+ Response 200 (application/json)

        {
            "username": "test@email.com"
        }

## Change password [/users/{username}/password]

+ Parameters

    + username (required, string, `test@email.com`) ... name of the user to perform the action on. "current" can be used for the user logged in


### changePassword [POST]
Change password by username or 'current' for currently logged user.

+ Request (application/json)

        {
            "passwordHash": "4f4dcc3b5aa765d61d8327deb882cf88"
            "newPasswordHash": "5f4dcc3b5aa765d61d8327deb882cf99"
        }
        
+ Response 204
+ Response 403


# Group Account
User Account is start point in Persoo. Every User can have many Account and each account have own Scenarios and Algorithms
(Every account have unique ID = apikey)

## Accounts list [/accounts]
### listAccounts [GET]
Složitější metoda, potřebuje to klient - možná z toho uděláme nějakou obecnou metodu na získání všech informací důležitých pro uživatele globálně.

+ Response 200 (application/json)

        [
            {
                "id": "er5orpfmme7vike5rumo19hl", 
                "name": "www.persoo.cz"
            },
            {
                "id": "53c3dbdd72530e32f7503347", 
                "name": "demo.persoo.cz"
            }
        ]

### newAccount [POST]
Create a new account.
+ Request (application/json)

        {
            "name": "My account"
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7508888",
            "name": "My account"
        }

## Account [/accounts/{account_id}]
A single account object with basic data

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### deleteAccount [DELETE]
Delete the account.
+ Response 204

+ Response 404

        { 
            "error": "Account not found."
        }
        
## Changes [/accounts/{account_id}/changes]

Manipulation of the differences between the current state (test environment) and the last stable state (production environment).

+ Parameters
    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    

### getChanges [GET]
Get description of the differences between the current and the last stable state.

+ Response 200 (application/json)

        {
            "modified": true
        }

### saveChanges [POST]
Make the current state the new last stable state. (After this operation, the test and production environments are equal.)

+ Response 204

### deleteChanges [DELETE]
Reset the current state to the last stable state (After this operation, the test and production environments are equal.)

+ Response 204

## Statistics [/accounts/{account_id}/statistics?timestampFrom={timestamp_from}&timestampTo={timestamp_to}]

+ Parameters
    + timestamp_from (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestamp_to (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getStatistics [GET]
Get daily statistics for an account.

If a metric isn't available for a particular day, `null` is used instead of a number value.

+ Response 200

        {
            "timestamps": [
                0,
                86400000,
                172800000,
                259200000
            ],
            "dates": [
                "1970-01-01",
                "1970-01-02",
                "1970-01-03",
                "1970-01-04"
            ],
            "metrics": {
                "clicks": [
                    null,
                    null,
                    816,
                    3266
                ],
                "impressions": [
                    null,
                    null,
                    1679,
                    4590
                ],
                "someOtherMetric1": [
                    null,
                    null,
                    0.648905714812609,
                    0.07806533989738285
                ],
                "someOtherMetric2": [
                    null,
                    null,
                    783,
                    412
                ]
            },
            "someField1": true,
            "someField2": 1984,
            "someField3": "stringValue"
        }

+ Response 404

        { 
            "error": "Account not found."
        }


# Group Settings

A single account settings
 * event processing - you can map fields comming from dataLayer in page to required format, adjust parameters for algorithms in event processing, ....
 * credentials - if you want to access Persoo RTP API for user identification, you need to know authentication key.
 * integrations - set Google Analytics version, etc.
 * customDataflow - (advanced feature), i.e. to import transactions from department stores,...

## Settings [/accounts/{account_id}/settings]

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on


### getSettings [GET]
Retrieve an account settings.
+ Response 200 (application/json)

        {   
            "accountId": "53c3dbdd72585e32f7508888",
            "name": "MyAccount",
            "eventProcessing": {
                "javascriptPreprocessor": "function process(io) { /* modify io.session.lastEvent*/ }",
                "affinityThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 0
                },
                "affinityShortTermThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 2
                }
            },
            "identifications": {
                "idTypes": ["email", "userId"]
            },
            "credentials": {
                "rtpAuthenticationKey": "secret9ed09dce2e5feb5b5f82e3976b"
            },
            "integrations": {
                "googleAnalytics": {
                    "isActive": true,
                    "version": "_gaq"
                },
                "modgen": {
                    "isActive": true,
                    "database":"persoo",
                    "hmacKey":"testKeytRsLbHLtNZYCFXhI9lUhbVZZwtPTJAfwVf5jdrPv1ylHverj0jYn3kzW7Vp"
                }
            },
            "customDataflows": {"inJSON":"format"}
        }
        
        
### updateSettings [PUT]
Update the account settings.
+ Request (application/json)

        {   
            "accountId": "53c3dbdd72585e32f7508888",
            "name": "MyAccount",
            "eventProcessing": {
                "javascriptPreprocessor": "function process(io) { /* modify io.session.lastEvent*/ }",
                "affinityThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 0
                },
                "affinityShortTermThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 2
                }
            },
            "identifications": {
                "idTypes": ["email", "userId"]
            },
            "credentials": {
                "rtpAuthenticationKey": "secret9ed09dce2e5feb5b5f82e3976b"
            },
            "integrations": {
                "googleAnalytics": {
                    "isActive": true,
                    "version": "_gaq"
                },
                "modgen": {
                    "isActive": true,
                    "database":"persoo",
                    "hmacKey":"testKeytRsLbHLtNZYCFXhI9lUhbVZZwtPTJAfwVf5jdrPv1ylHverj0jYn3kzW7Vp"
                }
            },
            "customDataflows": {"inJSON":"format"}
        }
        
+ Response 200 (application/json)

        {   
            "accountId": "53c3dbdd72585e32f7508888",
            "name": "MyAccount",
            "eventProcessing": {
                "javascriptPreprocessor": "function process(io) { /* modify io.session.lastEvent*/ }",
                "affinityThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 0
                },
                "affinityShortTermThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 2
                }
            },
            "credentials": {
                "rtpAuthenticationKey": "secret9ed09dce2e5feb5b5f82e3976b"
            },
            "integrations": {
                "googleAnalytics": {
                    "version": "_gaq"
                }
            },
            "customDataflows": {"inJSON":"format"}
        }

# Group Imports
Importing data (products, categories, ...) from external URLs. You can also run imports manually
or see import status.

## Imports list [/accounts/{account_id}/imports]

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listImports [GET]
Retrieve import settings for all available imports.

+ Response 200 (application/json)

        [
            {
                "isActive": true,
                "sourceURL": "http://eshop.com/export/xml/persoo.xml",
                "type": "xmlHeurekaProductFeed",
                "fieldsMapping" : {
                    "id" : {
                            "sourceField" : "id",
                            "type" : "string"
                    },
                    "title" : {
                            "sourceField" : "title",
                            "type" : "string"
                    },
                    "price" : {
                            "sourceField" : "price",
                            "type" : "double"
                    }
                },
                "customFieldsMapping" : {
                    "COLOR" : {
                            "sourceField" : "COLOR",
                            "type" : "string"
                    },
                    "AVAILABLE" : {
                            "sourceField" : "AVAILABLE",
                            "type" : "int"
                    },
                    "NOVINKA" : {
                            "sourceField" : "NOVINKA",
                            "type" : "string"
                    }
                },
                "javascriptPreprocessor": "function process(item) { return item; }"
            }
        ]


## Import [/accounts/{account_id}/imports/{import_id}]

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + import_id (required, string, `products`) ... either "products" or "categories"

### getImport [GET]
Retrieve import settings.

+ Response 200 (application/json)

        {   
            "id": "products",
            "isActive": true,
            "sourceURL": "http://eshop.com/export/xml/persoo.xml",
            "type": "xmlHeurekaProductFeed",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

### updateImport [PUT]
Update import settings.
+ Request (application/json)

        {
            "id": "products",
            "isActive": true,
            "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
            "type": "xmlHeurekaProductFeed",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

+ Response 200 (application/json)

        {
            "id": "products",
            "isActive": true,
            "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
            "type": "xmlHeurekaProductFeed",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

## Run import [/accounts/{account_id}/imports/{import_id}/run]

+ Parameters
    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + import_id (required, string, `products`) ... either "products" or "categories"

### runImport [POST]
Run import.

+ Response 200 (application/json)

        {
            "id": "209e6be2-8488-4e99-ab9f-3620848cf1d2"
        }

## Get import status [/accounts/{account_id}/imports/{import_id}/status]

+ Parameters
    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + import_id (required, string, `products`) ... either "products" or "categories"

### getImportStatus [GET]
Get import status:
* status is 
 * "green" - last import was OK, 
 * "yellow" - last import had problem, but previous/yesterdays import was OK, maybe source URL was down because of server updates, etc.
 * "red" - 2 or more last imports had problems
* lastSuccessTimestamp - timestamp of last successful import
* lastSuccessDate - human readable date of last successful import
* history of at most 10 imports with a detailed log

+ Response 200 (application/json)

        {
            "status": "green",
            "lastSuccessTimestamp": 1420034938343,
            "lastSuccessDate": "2014-01-23",
            "history": [
                {
                    "timestamp": 1422034938343,
                    "status": "pending",
                    "id": "209e6be2-8488-4e99-ab9f-3620848cf1d2",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1421034938343,
                    "status": "running",
                    "id": "199e6be2-8488-4e99-ab9f-3620848cf1c2",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1420034938343,
                    "status": "OK",
                    "id": "309e6be2-8488-4e99-ab9f-3620848cdf1c",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1419034938343,
                    "status": "error",
                    "id": "449e6be2-8488-4e99-ab9f-36201c2848cf",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1418034938343,
                    "status": "OK",
                    "id": "929e6be2-8488-4e99-ab9f-3620848c2cf1",
                    "log": "<TODO - JSON with data, error messages, ....>"
                }
            ]
        }


# Group Scenarios
Scenarios is set of products ids composed of several algorithms.

## Scenarios list [/accounts/{account_id}/recommendations/scenarios]

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listRecommendationScenarios [GET]
List all scenarios.

+ Response 200 (application/json)

        [
            {
                "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
                "isActive": true,
                "name": "Homepage - recommended news",
                "location": {
                    "mode": "replace",
                    "onPageType": "Homepage",
                    "onURL": "",
                    "selector": "#box1",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": [
                                {
                                    "ref": "6d29428f00c54fd1a02a22cafa989546"
                                }
                            ]
                        },
                        "name": "<variant name>",
                        "template": "<% /* var products = products_alternatives; */ %>\n<div class=\"persooRecommendation\">\n    <h2>Recommendation name</h2>\n    <div>\n    <% for(i=0; i < products.length && i < 8;i++){ %>\n            <div class=\"product\" style=\"width:180px; height:250px; float: left;\">\n                <a href=\"<%= products[i].link %>\">\n                        <img src=\"<%= products[i].imageLink %>\" alt=\"<%= products[i].title %>\" style=\"max-height:150px;max-width:150px;\">\n                        <span class=\"title\"><%= products[i].title %> KÄ</span><br>\n                        <span class=\"price\"><%= products[i].price %> KÄ</span>\n                </a>\n            </div>\n    <% } %>\n    </div>\n</div>"
                    }
                ]
            },
            {
                "id": "e23fc94bbcc947f5aa4872c5fc04966b",
                "isActive": true,
                "name": "Homepage - recommendation",
                "location": {
                    "mode": "replace",
                    "onPageType": "Homepage",
                    "onURL": "",
                    "selector": "#box4",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": []
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "2d5d11011d1444a29cc71d05e06f161d",
                "isActive": true,
                "name": "Detail - alternatives",
                "location": {
                    "mode": "replace",
                    "onPageType": "Product",
                    "onURL": "",
                    "selector": "#box2",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": [
                                {
                                    "ref": "6d29428f00c54fd1a02a22cafa989546"
                                }
                            ]
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "cf8920281e0341058474fb2dd47b4fff",
                "isActive": true,
                "name": "Detail - crosssell",
                "location": {
                    "mode": "replace",
                    "onPageType": "Product",
                    "onURL": "",
                    "selector": "#containerId",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": []
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "40aed0f057294e10bb6ba0fcb8f77050",
                "isActive": true,
                "name": "Basket - crosssell",
                "location": {
                    "mode": "replace",
                    "onPageType": "Category",
                    "onURL": "",
                    "selector": "#box3",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": []
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "239b49caad3946ecb295b96d4c972d9f",
                "isActive": true,
                "name": "Page footer - last viewed products",
                "location": {
                    "mode": "replace",
                    "onPageType": "category",
                    "onURL": ".*",
                    "selector": "#tab .products",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "default",
                        "logic": {
                            "count": 4,
                            "minCount": 3,
                            "fallbacks": [
                                {
                                    "ref": "6d29428f00c54fd1a02a22cafa989546"
                                }
                            ]
                        },
                        "name": "default",
                        "template": "<% /* var products = products_alternatives; */ %>\n<div class=\"persooRecommendation\">\n    <h2>Recommendation name</h2>\n    <div>\n    <% for(i=0; i < products.length && i < 8;i++){ %>\n            <div class=\"product\" style=\"width:180px; height:250px; float: left;\">\n                <a href=\"<%= products[i].link %>\">\n                        <img src=\"<%= products[i].imageLink %>\" alt=\"<%= products[i].title %>\" style=\"max-height:150px;max-width:150px;\">\n                        <span class=\"title\"><%= products[i].title %> KÃÂÃÂ</span><br>\n                        <span class=\"price\"><%= products[i].price %> KÃÂÃÂ</span>\n                </a>\n            </div>\n    <% } %>\n    </div>\n</div>"
                    }
                ]
            }
        ]

### newRecommendationScenario [POST]
Create a new scenario.
+ Request (application/json)
        
        {
            "name": "Best Sellers",
            "isActive": true,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "6d29428f00c54fd1a02a22cafa989546"
                            },
                            {
                               "ref": "b1bb18a943454f3f89357b56b284ef77"
                            }
                        ]
                    }
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
            "name": "Best Sellers",
            "isActive": true,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "6d29428f00c54fd1a02a22cafa989546"
                            },
                            {
                               "ref": "b1bb18a943454f3f89357b56b284ef77"
                            }
                        ]
                    }
                }
            ]
        }

## Scenario [/accounts/{account_id}/recommendations/scenarios/{scenario_id}]
A single scenario object with all its details.

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + scenario_id (required, string, `f9acbc0c49874d51bf6c70d46ef0cf4c`) ... ID of the scenario to perform the action on

### getRecommendationScenario [GET]
Retrieve a scenario.

+ Response 200 (application/json)

        {
            "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
            "name": "Best Sellers",
            "isActive": true,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "6d29428f00c54fd1a02a22cafa989546"
                            },
                            {
                               "ref": "b1bb18a943454f3f89357b56b284ef77"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }


### updateRecommendationScenario [PUT]
Update a scenario.

The request may contain the field `id`, which is ignored; `scenario_id` is used instead.

+ Request (application/json)

        {
            "id": "anyString",
            "name": "Best Selling Products",
            "isActive": false,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "7854436109d24de1a332a14a59c5a5c7"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 200 (application/json)

        {
            "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
            "name": "Best Selling Products",
            "isActive": false,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "7854436109d24de1a332a14a59c5a5c"7ss
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }


### deleteRecommendationScenario [DELETE]
Delete a scenario.

+ Response 204

+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }
        
## Statistics [/accounts/{account_id}/recommendations/scenarios/{scenario_id}/statistics?timestampFrom={timestamp_from}&timestampTo={timestamp_to}]

+ Parameters
    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + scenario_id (required, string, `f9acbc0c49874d51bf6c70d46ef0cf4c`) ... ID of the scenario to get the statistics of
    + timestamp_from (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestamp_to (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getRecommendationScenarioStatistics [GET]
Get daily statistics for a scenario.

If a metric isn't available for a particular day, `null` is used instead of a number value.

Metrics in the root level are the metrics for all variants aggregated. (The values in the example below are random and don't respect this.)

+ Response 200

        {
            "timestamps": [
                0,
                86400000,
                172800000,
                259200000
            ],
            "dates": [
                "1970-01-01",
                "1970-01-02",
                "1970-01-03",
                "1970-01-04"
            ],
            "metrics": {
                "clicks": [
                    null,
                    null,
                    799,
                    950
                ],
                "impressions": [
                    null,
                    null,
                    3251,
                    5428
                ],
                "someOtherMetric1": [
                    null,
                    null,
                    0.9095407241692913,
                    0.40087619631713756
                ],
                "someOtherMetric2": [
                    null,
                    null,
                    -216,
                    -51
                ]
            },
            "variants": {
                "0": {
                    "metrics": {
                        "clicks": [
                            null,
                            null,
                            1971,
                            1676
                        ],
                        "impressions": [
                            null,
                            null,
                            3088,
                            1773
                        ],
                        "someOtherMetric1": [
                            null,
                            null,
                            0.49225843350585785,
                            0.562467127770878
                        ],
                        "someOtherMetric2": [
                            null,
                            null,
                            422,
                            806
                        ]
                    },
                    "someField1": true,
                    "someField2": 1984,
                    "someField3": "stringValue"
                }
            },
            "someField1": true,
            "someField2": 1984,
            "someField3": "stringValue"
        }

+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }

# Group Algorithms
Algorithms is base recommendation computation logic.

## Algorithms list [/accounts/{account_id}/recommendations/algorithms]

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listRecommendationAlgorithms [GET]
List all algorithms.
+ Response 200 (application/json)

        [
            {
                "id": "6d29428f00c54fd1a02a22cafa989546", 
                "name": "Algorithm 1", 
                "class": "ProductSearch",
                "config": {
                    "must": [
                        {
                            "id": "categoryIsCurrentCategory"
                        },
                        {
                            "id": "productIsCurrentProduct"
                        },
                        {
                            "id": "myCustomSignal",
                            "name": "My custom title",
                            "config": {
                                "myField": {"$lt": "db.products.inBasket"}
                            }
                        }
                    ],
                    "mustNot": [
                        {
                            "id": "productIsInBasket"
                        }
                    ],
                    "should": [
                        { 
                            "id": "productAlsoViewedWithCurrentProduct", 
                            "value": 0
                        }
                    ]
                }
            },
            {
                "id": "b1bb18a943454f3f89357b56b284ef77", 
                "name": "Algorithm 2",
                "class": "lastViewed",
                "config": {}
            },
            {
                "id": "7854436109d24de1a332a14a59c5a5c7", 
                "name": "Algorithm 3",
                "class": "custom",
                "config": {
                    "customKey1": "customValue1",
                    "customKey2": "customValue2"
                }
            },
            {
                "id": "7981b9398bb44950a7dd0c063bd58785", 
                "name": "Algorithm 4",
                "class": "custom",
                "config": {}
            },
            {
                "id": "341d4a16646948bb9ed7444523196b1f", 
                "name": "Algorithm Modgen",
                "class": "Modgen",
                "config": {
                    "type": "userBased",
                    "count": 20,
                    "filterTemplate": "\"<%= lastEvent.categoryID %>\" in 'CATEGORIES'",
                    "boostTemplate": "",
                    "diversity": 0.0
                }
            }
        ]

### newRecommendationAlgorithm [POST]
Create a new algorithm.
+ Request (application/json)

        { 
            "name": "Algorithm Product Search",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }

+ Response 201 (application/json)

        {
            "id": "0c6b2cd1cb714cf5860f3d8e83c31a8e",
            "name": "Algorithm Product Search",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }

## Algorithm [/accounts/{account_id}/recommendations/algorithms/{algorithm_id}]
A single algorithm object with all its details

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + algorithm_id (required, string, `0c6b2cd1cb714cf5860f3d8e83c31a8e`) ... ID of the algorithm to perform the action on

### getRecommendationAlgorithm [GET]
Retrieve an algorithm.
+ Response 200 (application/json)

        { 
            "id": "0c6b2cd1cb714cf5860f3d8e83c31a8e", 
            "name": "Algorithm Product Search",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }

### updateRecommendationAlgorithm [PUT]
Update an algorithm.

The request may contain the field `id`, which is ignored; `algorithm_id` is used instead.

+ Request (application/json)

        { 
            "id": "anyString", 
            "name": "Algorithm for searching products",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }
        
+ Response 200 (application/json)

        { 
            "id": "0c6b2cd1cb714cf5860f3d8e83c31a8e", 
            "name": "Algorithm for searching products",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }
        
+ Response 404

        { 
            "error": "Recommendation algorithm not found."
        }

### deleteRecommendationAlgorithm [DELETE]
Delete an algorithm.
+ Response 204

+ Response 404

        { 
            "error": "Recommendation algorithm not found."
        }
        
# Group AB tests

## AB tests list [/accounts/{account_id}/abTests]

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listABTests [GET]
List all AB tests.

+ Response 200 (application/json)

        [
            {
                "id": "2ac25fb1ed2248b0a379e4c7d5049ab4",
                "name": "New shopping tray features evaluation",
                "isActive": true,
                "variants": [
                    {
                        "id": "A",
                        "name": "Old-style shopping tray",
                        "someField1": "someValue1",
                        "someField2": "someValue2"
                    },
                    {
                        "id": "B",
                        "name": "New-style shopping tray",
                        "someField1": "someValue1",
                        "someField2": "someValue2"
                    }
                ]
            },
            {
                "id": "b9e0ab6e9d184606982e33b66749d6b1",
                "name": "Persoo evaluation",
                "isActive": false,
                "variants": [
                    {
                        "id": "A",
                        "name": "Persoo off"
                        "someField1": "someValue1",
                        "someField2": "someValue2"
                    },
                    {
                        "id": "B",
                        "name": "Simple product recommendation",
                        "someField1": "someValue1",
                        "someField2": "someValue2"
                    },
                    {
                        "id": "C",
                        "name": "Personalized product recommendation",
                        "someField1": "someValue1",
                        "someField2": "someValue2"
                    }
                ]
            }
        ]

### newABTest [POST]
Create a new AB test.

+ Request (application/json)

        {
            "name": "New layout evaluation",
            "isActive": true,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "B",
                    "name": "New layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": "98e6bed351ed47c1878bd8af9374434d",
            "name": "New layout evaluation",
            "isActive": true,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "B",
                    "name": "New layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                }
            ]
        }

## AB test [/accounts/{account_id}/abTests/{ab_test_id}]
A single AB test object with all its details.

+ Parameters

    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + ab_test_id (required, string, `98e6bed351ed47c1878bd8af9374434d`) ... ID of the AB test to perform the action on

### getABTest [GET]
Retrieve an AB test.

+ Response 200 (application/json)

        {
            "id": "98e6bed351ed47c1878bd8af9374434d",
            "name": "New layout evaluation",
            "isActive": true,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "B",
                    "name": "New layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                }
            ]
        }

+ Response 404

        {
            "error": "AB test not found."
        }

### updateABTest [PUT]
Update an AB test.

The request may contain the field `id`, which is ignored; `ab_test_id` is used instead.

+ Request (application/json)

        {
            "id": "anyString",
            "name": "Evaluation of the new layout",
            "isActive": false,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "B",
                    "name": "New layout without chatbox",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "C",
                    "name": "New layout with chatbox",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                }
            ]
        }

+ Response 200 (application/json)

        {
            "id": "98e6bed351ed47c1878bd8af9374434d",
            "name": "Evaluation of the new layout",
            "isActive": false,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "B",
                    "name": "New layout without chatbox",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                },
                {
                    "id": "C",
                    "name": "New layout with chatbox",
                    "someField1": "someValue1",
                    "someField2": "someValue2"
                }
            ]
        }

+ Response 404

        {
            "error": "AB test not found."
        }

### deleteABTest [DELETE]
Delete an AB test.

+ Response 204

+ Response 404

        {
            "error": "AB test not found."
        }

## Statistics [/accounts/{account_id}/abTests/{ab_test_id}/statistics?timestampFrom={timestamp_from}&timestampTo={timestamp_to}]

+ Parameters
    + account_id (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + ab_test_id (required, string, `98e6bed351ed47c1878bd8af9374434d`) ... ID of the AB test to get the statistics of
    + timestamp_from (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestamp_to (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getABTestStatistics [GET]
Get daily statistics for an AB test.

If a metric isn't available for a particular day, `null` is used instead of a number value.

Metrics in the root level are the metrics for all variants aggregated. (The values in the example below are random and don't respect this.)

+ Response 200

        {
            "timestamps": [
                0,
                86400000,
                172800000,
                259200000
            ],
            "dates": [
                "1970-01-01",
                "1970-01-02",
                "1970-01-03",
                "1970-01-04"
            ],
            "metrics": {
                "clicks": [
                    1087,
                    5734,
                    2652,
                    2722
                ],
                "impressions": [
                    9871,
                    7736,
                    3509,
                    6366
                ],
                "someOtherMetric1": [
                    0.003668946172197818,
                    0.2178408492721543,
                    0.028777068662288574,
                    0.9506455736459639
                ],
                "someOtherMetric2": [
                    879,
                    -225,
                    -647,
                    -715
                ]
            },
            "variants": {
                "A": {
                    "metrics": {
                        "clicks": [
                            200,
                            825,
                            309,
                            421
                        ],
                        "impressions": [
                            214,
                            5741,
                            3476,
                            7961
                        ],
                        "someOtherMetric1": [
                            0.6555852127295537,
                            0.16896041396298656,
                            0.523081442902202,
                            0.4299017917097032
                        ],
                        "someOtherMetric2": [
                            -84,
                            485,
                            639,
                            -562
                        ]
                    },
                    "someField1": true,
                    "someField2": 1984,
                    "someField3": "stringValue"
                },
                "B": {
                    "metrics": {
                        "clicks": [
                            312,
                            782,
                            1194,
                            3461
                        ],
                        "impressions": [
                            4848,
                            3822,
                            2828,
                            4781
                        ],
                        "someOtherMetric1": [
                            0.6530000210379121,
                            0.4907884562323944,
                            0.9646868032420256,
                            0.572847940496758
                        ],
                        "someOtherMetric2": [
                            -538,
                            958,
                            -633,
                            -935
                        ]
                    },
                    "someField1": true,
                    "someField2": 1984,
                    "someField3": "stringValue"
                },
                "C": {
                    "metrics": {
                        "clicks": [
                            null,
                            null,
                            67,
                            344
                        ],
                        "impressions": [
                            null,
                            null,
                            884,
                            722
                        ],
                        "someOtherMetric1": [
                            null,
                            null,
                            0.2757569125503805,
                            0.1403655010726006
                        ],
                        "someOtherMetric2": [
                            null,
                            null,
                            444,
                            -424
                        ]
                    },
                    "someField1": true,
                    "someField2": 1984,
                    "someField3": "stringValue"
                }
            },
            "someField1": true,
            "someField2": 1984,
            "someField3": "stringValue"
        }

+ Response 404

        { 
            "error": "AB test not found."
        }