FORMAT: 1A
HOST: http://api.persoo.cz

# Persoo administration API
API for configuring Persoo accounts.

## Allowed HTTP requests

- `POST` - Creates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or a list of resources
- `DELETE` - Deletes a resource

## Typical server responses

- 200 `OK` - The request was successful (some API calls may return 201 or 204 instead).
- 201 `Created` - The request was successful, and a resource was created.
- 204 `No Content` - The request was successful, but no content is returned.
- 400 `Bad Request` - The request wasn't understood or was missing the required parameters.
- 401 `Unauthorized` - Authentication token is invalid or has expired. (Try logging in again.)
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - The requested resource wasn't found.
- 409 `Conflict` - Entity requested to be created already exists.

## Error reporting

Error responses (status 4xx/5xx) contain a detailed description of the error(s) in the following manner:
```
{
    "errors": [
        {
            "message": "Unauthorized."
        }
    ]
}
```
```
{
    "errors": [
        {
            "message": "Config structure validation: Field 'adminConfig.settings.productImport' missing.",
            "path": ["adminConfig", "settings", "productImport"]
        },
        {
            "message": "Config structure validation: Field 'adminConfig.settings.credentials[2]' isn't of type 'object'."
            "path": ["adminConfig", "settings", "credentials", 2]
        }
    ]
}
```
```
{
    "errors": [
        {
            "message": "Internal server error (ID f6429320a53711e4b0780002a5d5c51b)."
        }
    ]
}
```

# Group Users
Users are owners of accounts. Each user has unique credentials (ID, password) to access the system, associated email (unique in the system), role (common user or superuser), and other data (name, ...).

## Login [/login]
### login [POST]
Sets a token cookie so that the further requests are automatically authorized. The token expires in 30 minutes, but is automatically refreshed with each request.

+ Request (application/json)

    + Body
    
            {
                "id": "e8fb4ab5e6f44912a911fead7f286363",
                "passwordHash": "5f4dcc3b5aa765d61d8327deb882cf99"
            }
            
            or
            
            {
                "email": "user@email.com",
                "passwordHash": "5f4dcc3b5aa765d61d8327deb882cf99"
            }

+ Response 204

    + Headers
    
            Set-Cookie: Expires=Mon, 30-Jul-2014 09:12:42 GMT; persooAuthToken={token}

+ Response 401

## Logout [/logout]
### logout [POST]
Delete cookie with token.
+ Request

    + Headers
    
            Cookie: persooAuthToken={token};
            
+ Response 204

    + Headers
    
            Set-Cookie: Expires=Thu, 01 Jan 1970 00:00:00 GMT; persooAuthToken={token}

## Users [/users]
A user's details.

### listUsers [GET]
List all existing users.

+ Response 200 (application/json)

        [
            {
                "id": "e8fb4ab5e6f44912a911fead7f286363",
                "email": "test@email.com",
                "role": "common",
                "name": "Jakub"
            },
            {
                "id": "ce7ffd7478e840dd967be22ff3c17f23",
                "email": "test2@email.com",
                "role": "superuser",
                "name": "Administrator"
            }
        ]
        
### newUser [POST]
Create a new user.
+ Request (application/json)

        {
            "email": "test3@email.com",
            "passwordHash": "someHash",
            "role": "common",
            "name": "Alice"
        }

+ Response 201 (application/json)

        {
            "email": "test@email3.com",
            "role": "common",
            "name": "Alice"
        }
        
+ Response 400
+ Response 403
+ Response 409        

## User [/users/{userID}]
A user's details.

+ Parameters

    + userID (required, string, `e8fb4ab5e6f44912a911fead7f286363`) ... ID of the user to perform the action on. "current" can be used for the user logged in

### getUser [GET]
Retrieve the user details by email or 'current' for currently logged user.
+ Response 200 (application/json)

        {
            "id": "e8fb4ab5e6f44912a911fead7f286363",
            "email": "test@email.com",
            "role": "common",
            "name": "Jakub"
        }
        
+ Response 403
+ Response 404

        { 
            "error": "User not found."
        }

### updateUser [PUT]
Update the user details by email or 'current' for currently logged user.
+ Request (application/json)

        {
            "email": "kuba@email.com",
            "passwordHash": "14a88b9d2f52c55b5fbcf9c5d9c11875",
            "role": "superuser",
            "name": "Kuba"
        }

+ Response 200 (application/json)

        {
            "id": "e8fb4ab5e6f44912a911fead7f286363",
            "email": "kuba@email.com",
            "role": "superuser",
            "name": "Kuba"
        }

+ Response 400        
+ Response 403
+ Response 404
+ Response 409

### deleteUser [DELETE]
Delete the user by email or 'current' for currently logged user.

+ Response 204

+ Response 403
+ Response 404

        { 
            "error": "User not found."
        }
+ Response 409
  
## Register user [/users/register]   
    
### register [POST]
(Not implemented so far.)

Register a new user.

+ Request (application/json)

    + Body
    
            {
                "email": "user@email.com",
                "passwordHash": "5f4dcc3b5aa765d61d8327deb882cf99",
                "name": "John"
            }

+ Response 204
+ Response 409

## Change password [/users/{userID}/changePassword]

+ Parameters

    + userID (required, string, `e8fb4ab5e6f44912a911fead7f286363`) ... ID of the user to perform the action on. "current" can be used for the user logged in

### changePassword [POST]
Change password of a user.

+ Request (application/json)

        {
            "passwordHash": "5f4dcc3b5aa765d61d8327deb882cf99"
            "newPasswordHash": "14a88b9d2f52c55b5fbcf9c5d9c11875"
        }
        
+ Response 204
+ Response 400
+ Response 403
+ Response 404

## Reset password [/users/resetPassword]

### resetPassword [POST]
(Not implemented so far.)

Reset password of a user. The user will receive an email with a new password.

+ Request (application/json)

    + Body
        
            {
                "email": "user@email.com"
            }

+ Response 204
+ Response 404


# Group Account
User Account is start point in Persoo. Every User can have many Account and each account have own Scenarios and Algorithms
(Every account have unique ID = apikey)

## Accounts [/accounts]
### listAccounts [GET]
Složitější metoda, potřebuje to klient - možná z toho uděláme nějakou obecnou metodu na získání všech informací důležitých pro uživatele globálně.

+ Response 200 (application/json)

        [
            {
                "id": "er5orpfmme7vike5rumo19hl", 
                "name": "www.persoo.cz"
            },
            {
                "id": "53c3dbdd72530e32f7503347", 
                "name": "demo.persoo.cz"
            }
        ]

### newAccount [POST]
Create a new account.
+ Request (application/json)

        {
            "name": "My account"
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7508888",
            "name": "My account"
        }

## Account [/accounts/{accountID}]
A single account object with basic data

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### deleteAccount [DELETE]
Delete the account.
+ Response 204

+ Response 404

        { 
            "error": "Account not found."
        }
        
## Changes [/accounts/{accountID}/changes]

Manipulation of the differences between the current state (test environment) and the last stable state (production environment).

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    

### getChanges [GET]
Get description of the differences between the current and the last stable state.

+ Response 200 (application/json)

        {
            "modified": true
        }

### saveChanges [POST]
Make the current state the new last stable state. (After this operation, the test and production environments are equal.)

+ Response 204

### deleteChanges [DELETE]
Reset the current state to the last stable state (After this operation, the test and production environments are equal.)

+ Response 204

## Statistics [/accounts/{accountID}/statistics?timestampFrom={timestampFrom}&timestampTo={timestampTo}]

+ Parameters
    + timestampFrom (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestampTo (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getStatistics [GET]
Get daily statistics for an account.

If a metric isn't available for a particular day, `null` is used instead of a number value.

+ Response 200 (application/json)

        {
            "id": "niubci3ll8ig3dimo1lbjoqo",
            "timestamps": [
                0,
                86400000,
                172800000,
                259200000
            ],
            "dates": [
                "1970-01-01",
                "1970-01-02",
                "1970-01-03",
                "1970-01-04"
            ],
            "metrics": {
                "clicks": [
                    null,
                    null,
                    816,
                    3266
                ],
                "impressions": [
                    null,
                    null,
                    1679,
                    4590
                ],
                "someOtherMetric1": [
                    null,
                    null,
                    0.648905714812609,
                    0.07806533989738285
                ],
                "someOtherMetric2": [
                    null,
                    null,
                    783,
                    412
                ]
            }
        }

+ Response 404

        { 
            "error": "Account not found."
        }


# Group Settings

A single account settings
 * event processing - you can map fields comming from dataLayer in page to required format, adjust parameters for algorithms in event processing, ....
 * credentials - if you want to access Persoo RTP API for user identification, you need to know authentication key.
 * integrations - set Google Analytics version, etc.
 * customDataflow - (advanced feature), i.e. to import transactions from department stores,...

## Settings [/accounts/{accountID}/settings]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on


### getSettings [GET]
Retrieve an account settings.
+ Response 200 (application/json)

        {   
            "accountId": "53c3dbdd72585e32f7508888",
            "name": "MyAccount",
            "eventProcessing": {
                "javascriptPreprocessor": "function process(io) { /* modify io.session.lastEvent */ }",
                "affinityThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 0
                },
                "affinityShortTermThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 2
                }
            },
            "identifications": {
                "idTypes": ["email", "userId"]
            },
            "credentials": {
                "rtpAuthenticationKey": "secret9ed09dce2e5feb5b5f82e3976b"
            },
            "integrations": {
                "googleAnalytics": {
                    "isActive": true,
                    "version": "_gaq"
                },
                "modgen": {
                    "isActive": true,
                    "database":"persoo",
                    "hmacKey":"testKeytRsLbHLtNZYCFXhI9lUhbVZZwtPTJAfwVf5jdrPv1ylHverj0jYn3kzW7Vp"
                }
            },
            "customDataflows": {"inJSON":"format"}
        }
        
        
### updateSettings [PUT]
Update the account settings.
+ Request (application/json)

        {   
            "accountId": "53c3dbdd72585e32f7508888",
            "name": "MyAccount",
            "eventProcessing": {
                "javascriptPreprocessor": "function process(io) { /* modify io.session.lastEvent */ }",
                "affinityThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 0
                },
                "affinityShortTermThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 2
                }
            },
            "identifications": {
                "idTypes": ["email", "userId"]
            },
            "credentials": {
                "rtpAuthenticationKey": "secret9ed09dce2e5feb5b5f82e3976b"
            },
            "integrations": {
                "googleAnalytics": {
                    "isActive": true,
                    "version": "_gaq"
                },
                "modgen": {
                    "isActive": true,
                    "database":"persoo",
                    "hmacKey":"testKeytRsLbHLtNZYCFXhI9lUhbVZZwtPTJAfwVf5jdrPv1ylHverj0jYn3kzW7Vp"
                }
            },
            "customDataflows": {"inJSON":"format"}
        }
        
+ Response 200 (application/json)

        {   
            "accountId": "53c3dbdd72585e32f7508888",
            "name": "MyAccount",
            "eventProcessing": {
                "javascriptPreprocessor": "function process(io) { /* modify io.session.lastEvent */ }",
                "affinityThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 0
                },
                "affinityShortTermThresholds": {
                    "absoluteThreshold" : 0.5,
                    "relativeThreshold" : 0.05,
                    "halfTime" : 172800000,
                    "halfValueCount" : 2
                }
            },
            "credentials": {
                "rtpAuthenticationKey": "secret9ed09dce2e5feb5b5f82e3976b"
            },
            "integrations": {
                "googleAnalytics": {
                    "version": "_gaq"
                }
            },
            "customDataflows": {"inJSON":"format"}
        }

# Group Imports
Importing data (products, categories, ...) from external URLs. You can also run imports manually
or see import status.

## Imports [/accounts/{accountID}/imports]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listImports [GET]
Retrieve import settings for all available imports.

+ Response 200 (application/json)

        [
            {
                "isActive": true,
                "sourceURL": "http://eshop.com/export/xml/persoo.xml",
                "type": "xmlHeurekaProductFeed",
                "fieldsMapping" : {
                    "id" : {
                            "sourceField" : "id",
                            "type" : "string"
                    },
                    "title" : {
                            "sourceField" : "title",
                            "type" : "string"
                    },
                    "price" : {
                            "sourceField" : "price",
                            "type" : "double"
                    }
                },
                "customFieldsMapping" : {
                    "COLOR" : {
                            "sourceField" : "COLOR",
                            "type" : "string"
                    },
                    "AVAILABLE" : {
                            "sourceField" : "AVAILABLE",
                            "type" : "int"
                    },
                    "NOVINKA" : {
                            "sourceField" : "NOVINKA",
                            "type" : "string"
                    }
                },
                "javascriptPreprocessor": "function process(item) { return item; }"
            }
        ]


## Import [/accounts/{accountID}/imports/{importID}]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + importID (required, string, `products`) ... either "products" or "categories"

### getImport [GET]
Retrieve import settings.

+ Response 200 (application/json)

        {   
            "id": "products",
            "isActive": true,
            "sourceURL": "http://eshop.com/export/xml/persoo.xml",
            "type": "xmlHeurekaProductFeed",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

### updateImport [PUT]
Update import settings.
+ Request (application/json)

        {
            "id": "products",
            "isActive": true,
            "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
            "type": "xmlHeurekaProductFeed",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

+ Response 200 (application/json)

        {
            "id": "products",
            "isActive": true,
            "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
            "type": "xmlHeurekaProductFeed",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

## Run import [/accounts/{accountID}/imports/{importID}/run]

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + importID (required, string, `products`) ... either "products" or "categories"

### runImport [POST]
Run import.

+ Response 200 (application/json)

        {
            "id": "209e6be2-8488-4e99-ab9f-3620848cf1d2"
        }

## Get import status [/accounts/{accountID}/imports/{importID}/status]

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + importID (required, string, `products`) ... either "products" or "categories"

### getImportStatus [GET]
Get import status:
* status is 
 * "green" - last import was OK, 
 * "yellow" - last import had problem, but previous/yesterdays import was OK, maybe source URL was down because of server updates, etc.
 * "red" - 2 or more last imports had problems
* lastSuccessTimestamp - timestamp of last successful import
* lastSuccessDate - human readable date of last successful import
* history of at most 10 imports with a detailed log

+ Response 200 (application/json)

        {
            "status": "green",
            "lastSuccessTimestamp": 1420034938343,
            "lastSuccessDate": "2014-01-23",
            "history": [
                {
                    "timestamp": 1422034938343,
                    "status": "pending",
                    "id": "209e6be2-8488-4e99-ab9f-3620848cf1d2",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1421034938343,
                    "status": "running",
                    "id": "199e6be2-8488-4e99-ab9f-3620848cf1c2",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1420034938343,
                    "status": "OK",
                    "id": "309e6be2-8488-4e99-ab9f-3620848cdf1c",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1419034938343,
                    "status": "error",
                    "id": "449e6be2-8488-4e99-ab9f-36201c2848cf",
                    "log": "<TODO - JSON with data, error messages, ....>"
                },
                {
                    "timestamp": 1418034938343,
                    "status": "OK",
                    "id": "929e6be2-8488-4e99-ab9f-3620848c2cf1",
                    "log": "<TODO - JSON with data, error messages, ....>"
                }
            ]
        }


# Group Scenarios
Scenarios is set of products ids composed of several algorithms.

## Scenarios [/accounts/{accountID}/recommendations/scenarios]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listRecommendationScenarios [GET]
List all scenarios.

+ Response 200 (application/json)

        [
            {
                "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
                "isActive": true,
                "name": "Homepage - recommended news",
                "abTest": "2ac25fb1ed2248b0a379e4c7d5049ab4",
                "location": {
                    "mode": "replace",
                    "onPageType": "Homepage",
                    "onURL": "",
                    "selector": "#box1",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": [
                                {
                                    "ref": "6d29428f00c54fd1a02a22cafa989546"
                                }
                            ]
                        },
                        "name": "<variant name>",
                        "template": "<% /* var products = products_alternatives; */ %>\n<div class=\"persooRecommendation\">\n    <h2>Recommendation name</h2>\n    <div>\n    <% for(i=0; i < products.length && i < 8;i++){ %>\n            <div class=\"product\" style=\"width:180px; height:250px; float: left;\">\n                <a href=\"<%= products[i].link %>\">\n                        <img src=\"<%= products[i].imageLink %>\" alt=\"<%= products[i].title %>\" style=\"max-height:150px;max-width:150px;\">\n                        <span class=\"title\"><%= products[i].title %> KÄ</span><br>\n                        <span class=\"price\"><%= products[i].price %> KÄ</span>\n                </a>\n            </div>\n    <% } %>\n    </div>\n</div>"
                    }
                ]
            },
            {
                "id": "e23fc94bbcc947f5aa4872c5fc04966b",
                "isActive": true,
                "name": "Homepage - recommendation",
                "abTest": null,
                "location": {
                    "mode": "replace",
                    "onPageType": "Homepage",
                    "onURL": "",
                    "selector": "#box4",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": []
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "2d5d11011d1444a29cc71d05e06f161d",
                "isActive": true,
                "name": "Detail - alternatives",
                "abTest": null,
                "location": {
                    "mode": "replace",
                    "onPageType": "Product",
                    "onURL": "",
                    "selector": "#box2",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": [
                                {
                                    "ref": "6d29428f00c54fd1a02a22cafa989546"
                                }
                            ]
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "cf8920281e0341058474fb2dd47b4fff",
                "isActive": true,
                "name": "Detail - crosssell",
                "abTest": null,
                "location": {
                    "mode": "replace",
                    "onPageType": "Product",
                    "onURL": "",
                    "selector": "#containerId",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": []
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "40aed0f057294e10bb6ba0fcb8f77050",
                "isActive": true,
                "name": "Basket - crosssell",
                "abTest": null,
                "location": {
                    "mode": "replace",
                    "onPageType": "Category",
                    "onURL": "",
                    "selector": "#box3",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "0",
                        "logic": {
                            "count": 10,
                            "minCount": 3,
                            "fallbacks": []
                        },
                        "name": "<variant name>",
                        "template": "<html template>"
                    }
                ]
            },
            {
                "id": "239b49caad3946ecb295b96d4c972d9f",
                "isActive": true,
                "name": "Page footer - last viewed products",
                "abTest": null,
                "location": {
                    "mode": "replace",
                    "onPageType": "category",
                    "onURL": ".*",
                    "selector": "#tab .products",
                    "selectorClass": "query"
                },
                "variants": [
                    {
                        "condition": "true",
                        "id": "default",
                        "logic": {
                            "count": 4,
                            "minCount": 3,
                            "fallbacks": [
                                {
                                    "ref": "6d29428f00c54fd1a02a22cafa989546"
                                }
                            ]
                        },
                        "name": "default",
                        "template": "<% /* var products = products_alternatives; */ %>\n<div class=\"persooRecommendation\">\n    <h2>Recommendation name</h2>\n    <div>\n    <% for(i=0; i < products.length && i < 8;i++){ %>\n            <div class=\"product\" style=\"width:180px; height:250px; float: left;\">\n                <a href=\"<%= products[i].link %>\">\n                        <img src=\"<%= products[i].imageLink %>\" alt=\"<%= products[i].title %>\" style=\"max-height:150px;max-width:150px;\">\n                        <span class=\"title\"><%= products[i].title %> KÃÂÃÂ</span><br>\n                        <span class=\"price\"><%= products[i].price %> KÃÂÃÂ</span>\n                </a>\n            </div>\n    <% } %>\n    </div>\n</div>"
                    }
                ]
            }
        ]

### newRecommendationScenario [POST]
Create a new scenario.
+ Request (application/json)

        {
            "name": "Best Sellers",
            "isActive": true,
            "abTest": null,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "6d29428f00c54fd1a02a22cafa989546"
                            },
                            {
                               "ref": "b1bb18a943454f3f89357b56b284ef77"
                            }
                        ]
                    }
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
            "name": "Best Sellers",
            "isActive": true,
            "abTest": null,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "6d29428f00c54fd1a02a22cafa989546"
                            },
                            {
                               "ref": "b1bb18a943454f3f89357b56b284ef77"
                            }
                        ]
                    }
                }
            ]
        }

## Scenario [/accounts/{accountID}/recommendations/scenarios/{scenarioID}]
A single scenario object with all its details.

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + scenarioID (required, string, `f9acbc0c49874d51bf6c70d46ef0cf4c`) ... ID of the scenario to perform the action on

### getRecommendationScenario [GET]
Retrieve a scenario.

+ Response 200 (application/json)

        {
            "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
            "name": "Best Sellers",
            "isActive": true,
            "abTest": null,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "6d29428f00c54fd1a02a22cafa989546"
                            },
                            {
                               "ref": "b1bb18a943454f3f89357b56b284ef77"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }


### updateRecommendationScenario [PUT]
Update a scenario.

The request may contain the field `id`, which is ignored; `scenarioID` is used instead.

+ Request (application/json)

        {
            "id": "anyString",
            "name": "Best Selling Products",
            "isActive": false,
            "abTest": null,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "7854436109d24de1a332a14a59c5a5c7"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 200 (application/json)

        {
            "id": "f9acbc0c49874d51bf6c70d46ef0cf4c",
            "name": "Best Selling Products",
            "isActive": false,
            "abTest": null,
            "location": {
                "selectorClass": "query",
                "selector": "#tab .products",
                "mode": "replace",
                "onPageType": "Category",
                "onURL": "<regExp>"
            },
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "logic": {
                        "count": 10,
                        "minCount": 3,
                        "fallbacks": [
                            {
                               "ref": "7854436109d24de1a332a14a59c5a5c"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }


### deleteRecommendationScenario [DELETE]
Delete a scenario.

+ Response 204

+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }
        
## Scenarios statistics [/accounts/{accountID}/recommendations/scenarios/statistics?timestampFrom={timestampFrom}&timestampTo={timestampTo}]

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + timestampFrom (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestampTo (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getRecommendationScenariosStatistics [GET]
Get daily statistics for all scenarios.

If a metric isn't available for a particular day, `null` is used instead of a number value.

Metrics in the root level are the metrics for all variants aggregated. (The values in the example below are random and don't respect this.)

+ Response 200 (application/json)

        [
            {
                "id": "e23fc94bbcc947f5aa4872c5fc04966b",
                "timestamps": [
                    0,
                    86400000,
                    172800000,
                    259200000
                ],
                "dates": [
                    "1970-01-01",
                    "1970-01-02",
                    "1970-01-03",
                    "1970-01-04"
                ],
                "metrics": {
                    "clicks": [
                        null,
                        null,
                        799,
                        950
                    ],
                    "impressions": [
                        null,
                        null,
                        3251,
                        5428
                    ],
                    "someOtherMetric1": [
                        null,
                        null,
                        0.9095407241692913,
                        0.40087619631713756
                    ],
                    "someOtherMetric2": [
                        null,
                        null,
                        -216,
                        -51
                    ]
                },
                "variants": {
                    "0": {
                        "metrics": {
                            "clicks": [
                                null,
                                null,
                                1500,
                                1444
                            ],
                            "impressions": [
                                null,
                                null,
                                1088,
                                1273
                            ],
                            "someOtherMetric1": [
                                null,
                                null,
                                0.49225843350585785,
                                0.562467127770878
                            ],
                            "someOtherMetric2": [
                                null,
                                null,
                                422,
                                806
                            ]
                        }
                    },
                    "1": {
                        "metrics": {
                            "clicks": [
                                null,
                                null,
                                1700,
                                1676
                            ],
                            "impressions": [
                                null,
                                null,
                                3088,
                                1773
                            ],
                            "someOtherMetric1": [
                                null,
                                null,
                                0.49225843350585785,
                                0.562467127770878
                            ],
                            "someOtherMetric2": [
                                null,
                                null,
                                422,
                                806
                            ]
                        }
                    }
                }
            },
            {
                "id": "a35c73fbb9c84152bddb15a4b6c5bd98",
                "timestamps": [
                    0,
                    86400000,
                    172800000,
                    259200000
                ],
                "dates": [
                    "1970-01-01",
                    "1970-01-02",
                    "1970-01-03",
                    "1970-01-04"
                ],
                "metrics": {
                    "clicks": [
                        643,
                        null,
                        null,
                        950
                    ],
                    "impressions": [
                        4112,
                        null,
                        null,
                        4354
                    ],
                    "someOtherMetric1": [
                        0.1593870380526593,
                        null,
                        null,
                        0.2735065237536176
                    ],
                    "someOtherMetric2": [
                        -123,
                        null,
                        null,                        
                        -43
                    ]
                },
                "variants": {
                    "0": {
                        "metrics": {
                            "clicks": [
                                3221,
                                null,
                                null,
                                421
                            ],
                            "impressions": [
                                432,
                                null,
                                null,
                                511
                            ],
                            "someOtherMetric1": [
                                0.43912250908729766,
                                null,
                                null,
                                0.2646019266493288
                            ],
                            "someOtherMetric2": [
                                421,
                                null,
                                null,
                                763
                            ]
                        }
                    },
                    "1": {
                        "metrics": {
                            "clicks": [
                                4211,
                                null,
                                null,
                                1981
                            ],
                            "impressions": [
                                914,
                                null,
                                null,
                                7531
                            ],
                            "someOtherMetric1": [
                                0.7504501949201073,
                                null,
                                null,
                                0.545216574297256
                            ],
                            "someOtherMetric2": [
                                321,
                                null,
                                null,
                                637
                            ]
                        }
                    }
                }
            }
        ]

## Scenario statistics [/accounts/{accountID}/recommendations/scenarios/{scenarioID}/statistics?timestampFrom={timestampFrom}&timestampTo={timestampTo}]

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + scenarioID (required, string, `f9acbc0c49874d51bf6c70d46ef0cf4c`) ... ID of the scenario to get the statistics of
    + timestampFrom (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestampTo (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getRecommendationScenarioStatistics [GET]
Get daily statistics for a scenario.

If a metric isn't available for a particular day, `null` is used instead of a number value.

Metrics in the root level are the metrics for all variants aggregated. (The values in the example below are random and don't respect this.)

+ Response 200 (application/json)

        {
            "id": "e23fc94bbcc947f5aa4872c5fc04966b",
            "timestamps": [
                0,
                86400000,
                172800000,
                259200000
            ],
            "dates": [
                "1970-01-01",
                "1970-01-02",
                "1970-01-03",
                "1970-01-04"
            ],
            "metrics": {
                "clicks": [
                    null,
                    null,
                    799,
                    950
                ],
                "impressions": [
                    null,
                    null,
                    3251,
                    5428
                ],
                "someOtherMetric1": [
                    null,
                    null,
                    0.9095407241692913,
                    0.40087619631713756
                ],
                "someOtherMetric2": [
                    null,
                    null,
                    -216,
                    -51
                ]
            },
            "variants": {
                "0": {
                    "metrics": {
                        "clicks": [
                            null,
                            null,
                            1500,
                            1444
                        ],
                        "impressions": [
                            null,
                            null,
                            1088,
                            1273
                        ],
                        "someOtherMetric1": [
                            null,
                            null,
                            0.49225843350585785,
                            0.562467127770878
                        ],
                        "someOtherMetric2": [
                            null,
                            null,
                            422,
                            806
                        ]
                    }
                },
                "1": {
                    "metrics": {
                        "clicks": [
                            null,
                            null,
                            1700,
                            1676
                        ],
                        "impressions": [
                            null,
                            null,
                            3088,
                            1773
                        ],
                        "someOtherMetric1": [
                            null,
                            null,
                            0.49225843350585785,
                            0.562467127770878
                        ],
                        "someOtherMetric2": [
                            null,
                            null,
                            422,
                            806
                        ]
                    }
                }
            }
        }

+ Response 404

        { 
            "error": "Recommendation scenario not found."
        }

# Group Algorithms
Algorithms is base recommendation computation logic.

## Algorithms [/accounts/{accountID}/recommendations/algorithms]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listRecommendationAlgorithms [GET]
List all algorithms.
+ Response 200 (application/json)

        [
            {
                "id": "6d29428f00c54fd1a02a22cafa989546", 
                "name": "Algorithm 1", 
                "class": "ProductSearch",
                "config": {
                    "must": [
                        {
                            "id": "categoryIsCurrentCategory"
                        },
                        {
                            "id": "productIsCurrentProduct"
                        },
                        {
                            "id": "myCustomSignal",
                            "name": "My custom title",
                            "config": {
                                "myField": {"$lt": "db.products.inBasket"}
                            }
                        }
                    ],
                    "mustNot": [
                        {
                            "id": "productIsInBasket"
                        }
                    ],
                    "should": [
                        { 
                            "id": "productAlsoViewedWithCurrentProduct", 
                            "value": 0
                        }
                    ]
                }
            },
            {
                "id": "b1bb18a943454f3f89357b56b284ef77", 
                "name": "Algorithm 2",
                "class": "lastViewed",
                "config": {}
            },
            {
                "id": "7854436109d24de1a332a14a59c5a5c7", 
                "name": "Algorithm 3",
                "class": "custom",
                "config": {
                    "customKey1": "customValue1",
                    "customKey2": "customValue2"
                }
            },
            {
                "id": "7981b9398bb44950a7dd0c063bd58785", 
                "name": "Algorithm 4",
                "class": "custom",
                "config": {}
            },
            {
                "id": "341d4a16646948bb9ed7444523196b1f", 
                "name": "Algorithm Modgen",
                "class": "Modgen",
                "config": {
                    "type": "userBased",
                    "count": 20,
                    "filterTemplate": "\"<%= lastEvent.categoryID %>\" in 'CATEGORIES'",
                    "boostTemplate": "",
                    "diversity": 0.0
                }
            }
        ]

### newRecommendationAlgorithm [POST]
Create a new algorithm.
+ Request (application/json)

        { 
            "name": "Algorithm Product Search",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }

+ Response 201 (application/json)

        {
            "id": "0c6b2cd1cb714cf5860f3d8e83c31a8e",
            "name": "Algorithm Product Search",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }

## Algorithm [/accounts/{accountID}/recommendations/algorithms/{algorithmID}]
A single algorithm object with all its details

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + algorithmID (required, string, `0c6b2cd1cb714cf5860f3d8e83c31a8e`) ... ID of the algorithm to perform the action on

### getRecommendationAlgorithm [GET]
Retrieve an algorithm.
+ Response 200 (application/json)

        { 
            "id": "0c6b2cd1cb714cf5860f3d8e83c31a8e", 
            "name": "Algorithm Product Search",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }

### updateRecommendationAlgorithm [PUT]
Update an algorithm.

The request may contain the field `id`, which is ignored; `algorithmID` is used instead.

+ Request (application/json)

        { 
            "id": "anyString", 
            "name": "Algorithm for searching products",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }
        
+ Response 200 (application/json)

        { 
            "id": "0c6b2cd1cb714cf5860f3d8e83c31a8e", 
            "name": "Algorithm for searching products",
            "class": "ProductSearch",
            "config": {
                "must": [
                    {
                        "id": "categoryIsCurrentCategory"
                    },
                    {
                        "id": "productIsCurrentProduct"
                    },
                    {
                        "id": "myCustomSignal",
                        "name": "My custom title",
                        "config": {
                            "myField": {"$lt": "db.products.inBasket"}
                        }
                    }
                ],
                "mustNot": [
                    {
                        "id": "productIsInBasket"
                    }
                ],
                "should": [
                    { 
                        "id": "productAlsoViewedWithCurrentProduct", 
                        "value": 0
                    }
                ]
            } 
        }
        
+ Response 404

        { 
            "error": "Recommendation algorithm not found."
        }

### deleteRecommendationAlgorithm [DELETE]
Delete an algorithm.
+ Response 204

+ Response 404

        { 
            "error": "Recommendation algorithm not found."
        }
        
# Group AB tests

## AB tests [/accounts/{accountID}/abTests]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listABTests [GET]
List all AB tests.

+ Response 200 (application/json)

        [
            {
                "id": "2ac25fb1ed2248b0a379e4c7d5049ab4",
                "name": "New shopping tray features evaluation",
                "isActive": true,
                "variants": [
                    {
                        "id": "A",
                        "name": "Old-style shopping tray",
                        "weight": 50,
                        "winner": true,
                        "baseline": true
                    },
                    {
                        "id": "B",
                        "name": "New-style shopping tray",
                        "weight": 50,
                        "winner": false,
                        "baseline": false
                    }
                ]
            },
            {
                "id": "b9e0ab6e9d184606982e33b66749d6b1",
                "name": "Persoo evaluation",
                "isActive": false,
                "variants": [
                    {
                        "id": "A",
                        "name": "Persoo off",
                        "weight": 50,
                        "winner": false,
                        "baseline": true
                    },
                    {
                        "id": "B",
                        "name": "Simple product recommendation",
                        "weight": 50,
                        "winner": true,
                        "baseline": false
                    },
                    {
                        "id": "C",
                        "name": "Personalized product recommendation",
                        "weight": 50,
                        "winner": false,
                        "baseline": false
                    }
                ]
            }
        ]

### newABTest [POST]
Create a new AB test.

+ Request (application/json)

        {
            "name": "New layout evaluation",
            "isActive": true,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "weight": 50,
                    "winner": true,
                    "baseline": true
                },
                {
                    "id": "B",
                    "name": "New layout",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": "98e6bed351ed47c1878bd8af9374434d",
            "name": "New layout evaluation",
            "isActive": true,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "weight": 50,
                    "winner": true,
                    "baseline": true
                },
                {
                    "id": "B",
                    "name": "New layout",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                }
            ]
        }

## AB test [/accounts/{accountID}/abTests/{abTestID}]
A single AB test object with all its details.

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + abTestID (required, string, `98e6bed351ed47c1878bd8af9374434d`) ... ID of the AB test to perform the action on

### getABTest [GET]
Retrieve an AB test.

+ Response 200 (application/json)

        {
            "id": "98e6bed351ed47c1878bd8af9374434d",
            "name": "New layout evaluation",
            "isActive": true,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "weight": 50,
                    "winner": true,
                    "baseline": true
                },
                {
                    "id": "B",
                    "name": "New layout",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                }
            ]
        }

+ Response 404

        {
            "error": "AB test not found."
        }

### updateABTest [PUT]
Update an AB test.

The request may contain the field `id`, which is ignored; `abTestID` is used instead.

+ Request (application/json)

        {
            "id": "anyString",
            "name": "Evaluation of the new layout",
            "isActive": false,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "weight": 50,
                    "winner": true,
                    "baseline": true
                },
                {
                    "id": "B",
                    "name": "New layout without chatbox",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                },
                {
                    "id": "C",
                    "name": "New layout with chatbox",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                }
            ]
        }

+ Response 200 (application/json)

        {
            "id": "98e6bed351ed47c1878bd8af9374434d",
            "name": "Evaluation of the new layout",
            "isActive": false,
            "variants": [
                {
                    "id": "A",
                    "name": "Old layout",
                    "weight": 50,
                    "winner": true,
                    "baseline": true
                },
                {
                    "id": "B",
                    "name": "New layout without chatbox",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                },
                {
                    "id": "C",
                    "name": "New layout with chatbox",
                    "weight": 50,
                    "winner": false,
                    "baseline": false
                }
            ]
        }

+ Response 404

        {
            "error": "AB test not found."
        }

### deleteABTest [DELETE]
Delete an AB test.

+ Response 204

+ Response 404

        {
            "error": "AB test not found."
        }
        
## AB tests statistics [/accounts/{accountID}/abTests/statistics?timestampFrom={timestampFrom}&timestampTo={timestampTo}]

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + timestampFrom (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestampTo (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getABTestsStatistics [GET]
Get daily statistics for all AB tests.

If a metric isn't available for a particular day, `null` is used instead of a number value.

Metrics in the root level are the metrics for all variants aggregated. (The values in the example below are random and don't respect this.)

+ Response 200 (application/json)

        [
            {
                "id": "e23fc94bbcc947f5aa4872c5fc04966b",
                "timestamps": [
                    0,
                    86400000,
                    172800000,
                    259200000
                ],
                "dates": [
                    "1970-01-01",
                    "1970-01-02",
                    "1970-01-03",
                    "1970-01-04"
                ],
                "metrics": {
                    "clicks": [
                        1087,
                        5734,
                        2652,
                        2722
                    ],
                    "impressions": [
                        9871,
                        7736,
                        3509,
                        6366
                    ],
                    "someOtherMetric1": [
                        0.003668946172197818,
                        0.2178408492721543,
                        0.028777068662288574,
                        0.9506455736459639
                    ],
                    "someOtherMetric2": [
                        879,
                        -225,
                        -647,
                        -715
                    ]
                },
                "variants": {
                    "A": {
                        "metrics": {
                            "clicks": [
                                200,
                                825,
                                309,
                                421
                            ],
                            "impressions": [
                                214,
                                5741,
                                3476,
                                7961
                            ],
                            "someOtherMetric1": [
                                0.6555852127295537,
                                0.16896041396298656,
                                0.523081442902202,
                                0.4299017917097032
                            ],
                            "someOtherMetric2": [
                                -84,
                                485,
                                639,
                                -562
                            ]
                        }
                    },
                    "B": {
                        "metrics": {
                            "clicks": [
                                312,
                                782,
                                1194,
                                3461
                            ],
                            "impressions": [
                                4848,
                                3822,
                                2828,
                                4781
                            ],
                            "someOtherMetric1": [
                                0.6530000210379121,
                                0.4907884562323944,
                                0.9646868032420256,
                                0.572847940496758
                            ],
                            "someOtherMetric2": [
                                -538,
                                958,
                                -633,
                                -935
                            ]
                        }
                    },
                    "C": {
                        "metrics": {
                            "clicks": [
                                null,
                                null,
                                67,
                                344
                            ],
                            "impressions": [
                                null,
                                null,
                                884,
                                722
                            ],
                            "someOtherMetric1": [
                                null,
                                null,
                                0.2757569125503805,
                                0.1403655010726006
                            ],
                            "someOtherMetric2": [
                                null,
                                null,
                                444,
                                -424
                            ]
                        }
                    }
                }
            },
            {
                "id": "d06461205e5e4abbaa185dec05c802a9",
                "timestamps": [
                    0,
                    86400000,
                    172800000,
                    259200000
                ],
                "dates": [
                    "1970-01-01",
                    "1970-01-02",
                    "1970-01-03",
                    "1970-01-04"
                ],
                "metrics": {
                    "clicks": [
                        8921,
                        3532,
                        983,
                        1257
                    ],
                    "impressions": [
                        2811,
                        10439,
                        8328,
                        1024
                    ],
                    "someOtherMetric1": [
                        0.8524400094267622,
                        0.9835282205407248,
                        0.5331655147155644,
                        0.03159187667912333
                    ],
                    "someOtherMetric2": [
                        322,
                        68439,
                        12,
                        -8992
                    ]
                },
                "variants": {
                    "A": {
                        "metrics": {
                            "clicks": [
                                892,
                                242,
                                891,
                                238
                            ],
                            "impressions": [
                                578,
                                2383,
                                8491,
                                2892
                            ],
                            "someOtherMetric1": [
                                0.2245794265748755,
                                0.767712355737353,
                                0.48843346243323227,
                                0.014840019490347522
                            ],
                            "someOtherMetric2": [
                                -892,
                                211,
                                2393,
                                -178
                            ]
                        }
                    },
                    "B": {
                        "metrics": {
                            "clicks": [
                                231,
                                8943,
                                182,
                                8293
                            ],
                            "impressions": [
                                7823,
                                3211,
                                178,
                                5811
                            ],
                            "someOtherMetric1": [
                                0.4540958393612988,
                                0.12314807796229665,
                                0.8826032985473886,
                                0.4288217771902769
                            ],
                            "someOtherMetric2": [
                                -613,
                                121,
                                -3829,
                                572
                            ]
                        }
                    }
                }
            }
        ]

## AB test statistics [/accounts/{accountID}/abTests/{abTestID}/statistics?timestampFrom={timestampFrom}&timestampTo={timestampTo}]

+ Parameters
    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on
    + abTestID (required, string, `98e6bed351ed47c1878bd8af9374434d`) ... ID of the AB test to get the statistics of
    + timestampFrom (required, long, `43932000`) ... start the statistics with the day containing this timestamp (in UTC)
    + timestampTo (required, long, `300000000`) ... end the statistics with the day containing this timestamp (in UTC)

### getABTestStatistics [GET]
Get daily statistics for an AB test.

If a metric isn't available for a particular day, `null` is used instead of a number value.

Metrics in the root level are the metrics for all variants aggregated. (The values in the example below are random and don't respect this.)

+ Response 200 (application/json)

        {
            "id": "e23fc94bbcc947f5aa4872c5fc04966b",
            "timestamps": [
                0,
                86400000,
                172800000,
                259200000
            ],
            "dates": [
                "1970-01-01",
                "1970-01-02",
                "1970-01-03",
                "1970-01-04"
            ],
            "metrics": {
                "clicks": [
                    1087,
                    5734,
                    2652,
                    2722
                ],
                "impressions": [
                    9871,
                    7736,
                    3509,
                    6366
                ],
                "someOtherMetric1": [
                    0.003668946172197818,
                    0.2178408492721543,
                    0.028777068662288574,
                    0.9506455736459639
                ],
                "someOtherMetric2": [
                    879,
                    -225,
                    -647,
                    -715
                ]
            },
            "variants": {
                "A": {
                    "metrics": {
                        "clicks": [
                            200,
                            825,
                            309,
                            421
                        ],
                        "impressions": [
                            214,
                            5741,
                            3476,
                            7961
                        ],
                        "someOtherMetric1": [
                            0.6555852127295537,
                            0.16896041396298656,
                            0.523081442902202,
                            0.4299017917097032
                        ],
                        "someOtherMetric2": [
                            -84,
                            485,
                            639,
                            -562
                        ]
                    }
                },
                "B": {
                    "metrics": {
                        "clicks": [
                            312,
                            782,
                            1194,
                            3461
                        ],
                        "impressions": [
                            4848,
                            3822,
                            2828,
                            4781
                        ],
                        "someOtherMetric1": [
                            0.6530000210379121,
                            0.4907884562323944,
                            0.9646868032420256,
                            0.572847940496758
                        ],
                        "someOtherMetric2": [
                            -538,
                            958,
                            -633,
                            -935
                        ]
                    }
                },
                "C": {
                    "metrics": {
                        "clicks": [
                            null,
                            null,
                            67,
                            344
                        ],
                        "impressions": [
                            null,
                            null,
                            884,
                            722
                        ],
                        "someOtherMetric1": [
                            null,
                            null,
                            0.2757569125503805,
                            0.1403655010726006
                        ],
                        "someOtherMetric2": [
                            null,
                            null,
                            444,
                            -424
                        ]
                    }
                }
            }
        }

+ Response 404

        { 
            "error": "AB test not found."
        }
        
# Group Account Accesses

## Account accesses [/accounts/{accountID}/accesses]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of the account to perform the action on

### listAccountAccesses [GET]
List all accesses to this account.

+ Response 200 (application/json)

        [
            {
                "id": "e8fb4ab5e6f44912a911fead7f286363"
                "email": "test@email.com"
                "name": "Jakub"
            },
            {
                "id": "daf38a59e94948bfbdacbd4a34eccb47"
                "email": "test3@email.com"
                "name": "Alice"
            }
        ]
        
+ Response 404

### newAccountAccess [POST]
Adds a user an access to the account.
    
+ Request (application/json)
        
        {
            "id": "daf38a59e94948bfbdacbd4a34eccb47"
        }
            
+ Response 201

        {
            "id": "daf38a59e94948bfbdacbd4a34eccb47"
            "email": "test3@email.com"
            "name": "Alice"
        }
        
+ Response 404
+ Response 409

## Account access [/accounts/{accountID}/accesses/{userID}]

+ Parameters

    + accountID (required, string, `4959bc0ab5f24ac2a9688908adaf9e24`) ... ID of an account
    + userID (required, string, `daf38a59e94948bfbdacbd4a34eccb47`) ... ID of a user
    
### getAccountAccess [GET]
Retrieve an account access.

+ Response 200 (application/json)

        {
            "id": "daf38a59e94948bfbdacbd4a34eccb47",
            "email": "test3@email.com",
            "name": "Alice"
        }
        
+ Response 404 (application/json)

        {
            "error": "Account not found."
        }

+ Response 404 (application/json)

        {
            "error": "Account access not found."
        }
        
### deleteAccountAccess [DELETE]
Deletes an account access.

+ Response 204

+ Response 403

+ Response 404 (application/json)

        {
            "error": "Account not found."
        }

+ Response 404 (application/json)

        {
            "error": "Account access not found."
        }

## Invite user [/accounts/{accountID}/accesses/inviteUser]

### inviteUser [POST]
Invite a user to get access to the account.
If the user exists, he receives access to the account. 
If the user doesn't exist, an error that you must register user first is returned.
(In the future, method will send invitation emails for nonexisting users.)

+ Request (application/json)

+ Response 200 (application/json)

        {
            "id": "daf38a59e94948bfbdacbd4a34eccb47",
            "email": "test3@email.com",
            "name": "Alice"
        }

+ Response 404 (application/json)

        {
            "error": "User not found."
        }
        