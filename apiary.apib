FORMAT: 1A
HOST: http://api.persoo.cz

# Persoo
Content recommendation service

## Allowed HTTPs requests:

- `POST` - Creates a resource
- `PUT` - Updates a resource
- `PATCH` - Partially updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

## Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication token is invalid or expired (try login again)
- 403 `Forbidden` - Access denied. 
- 404 `Not Found` - Resource was not found.


# Group User
The users are owners of accounts. Each users have unique credentials to access in system.

TODO - Dodělat, představa je taková, že requesty budeme jen přeposílat persoo-config-unitě. V reálu budou nejspíš metody trochu jiné, nebude to umět tolik, ale zhruba to tak bude.

## Login [/login]
### login [POST]
V hlavičce odpovědi nastaví cookie tak, aby další requesty mohly probíhat bez zásahu (autentizace se bere z cookie).
Token vyprší po půl hodině. S každým requestem může v odpovědi přijít aktualizovaný token.

+ Request (application/json)

    + Body
    
            {
                "username":"user@email.com",
                "passwordHash":"passwordHash"
            }

+ Response 204

    + Headers
    
            Set-Cookie:  expires=Mon, 30-Jul-2014 09:12:42 GMT; AuthToken={token};

+ Response 401

## Logout [/logout]
### logout [POST]
Delete cookie with token.
+ Request

    + Headers
    
            Cookie: AuthToken={token};
            
+ Response 204

    + Headers
    
            Set-Cookie:  expires=Thu, 01 Jan 1970 00:00:01 GMT AuthToken={token};

## Users [/users/{username}]
A user's details/settings.

+ Parameters

    + username (required, string, `test@email.com`) ... username to which do you want to perform actions. "current" can be used for the user logged in.


### getUser [GET]
Retrieve the user details/settings.
+ Response 200 (application/json)

        {
            "username": "test@email.com"
        }
    
### updateUser [PUT]
Modify the user details/settings. Username in JSON is not mandatory. If present, then it must match the username in request's pathname.
+ Request (application/json)

        {
            "username": "email@email.com"
        }
        
+ Response 200 (application/json)

        {
            "username": "email@email.com"
        }

## Change password [/users/{username}/password]

+ Parameters

    + username (required, string, `test@email.com`) ... username to which do you want to perform actions. "current" can be used for the user logged in.


### changePassword [POST]
Change password for currently logged-in user.

+ Request (application/json)

        {
            "passwordHash": "4f4dcc3b5aa765d61d8327deb882cf88"
            "newPasswordHash": "5f4dcc3b5aa765d61d8327deb882cf99"
        }
        
+ Response 204
+ Response 403


# Group Account
User Account is start point in Persoo. Every User can have many Account and each account have own Scenarios and Algorithms
(Every account have unique ID = apikey)

## Account Collection [/accounts]
### listAccounts [GET]
Složitější metoda, potřebuje to klient - možná z toho uděláme nějakou obecnou metodu na získání všech informací důležitých pro uživatele globálně.

+ Response 200 (application/json)

        [
            {
                "id": "53ba7fc872530e577f35c699", 
                "name": "www.persoo.cz"
            },
            {
                "id": "53c3dbdd72530e32f7503347", 
                "name": "demo.persoo.cz"
            }
        ]

### createAccount [POST]
Create a new account.
+ Request (application/json)

        {
            "name": "My account"
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7508888",
            "name": "My account"
        }

## Account [/accounts/{account_id}]
A single account object with basic data

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions

### deleteAccount [DELETE]
Delete the account.
+ Response 204

+ Response 404

        { 
            "error": "Account not found"
        }

## Account settings [/accounts/{account_id}/settings]
A single account settings

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions


### getAccountSettings [GET]
Retrieve an account settings.
+ Response 200 (application/json)

        {
            "name": "My Account Name",
            "productImports": {
                "XMLFeedURL": "http://eshop.com/export/xml/persoo.xml",
                "fieldsMapping": {
                    "_ID": {
                        "type": "String",
                        "sourceField": "ITEM_ID"
                    },
                    "_NAME": {
                        "type": "String",
                        "sourceField": "PRODUCT_NAME"
                    },
                    "_PRICE": {
                        "type": "Float",
                        "sourceField": "PRICE_VAT"
                    },
                    "_URL": {
                        "type": "String",
                        "sourceField": "URL"
                    },
                    "_IMAGE": {
                        "type": "String",
                        "sourceField": "IMGURL"
                    },
                    "_CATEGORY": {
                        "type": "String",
                        "sourceField": "CATEGORY"
                    },
                    "_HIERARCHY": {
                        "type": "String",
                        "sourceField": "HIERARCHY"
                    } 
                },
                "customFieldsMapping": {
                    "BARVA": {
                        "type": "String",
                        "sourceField": "BARVA"
                    },
                    "FLAG": {
                        "type": "String",
                        "sourceField": "FLAG"
                    } 
                },
                "javascriptPreprocessor": "function process(item) { return item; }"
            }
        }
        
        
### updateAccountSettings [PUT]
Update the account settings.
+ Request (application/json)

        {
            "name": "My Account Name",
            "productImports": {
                "XMLFeedURL": "http://eshop2.com/export/xml/persoo.xml",
                "fieldsMapping": {
                    "_ID": {
                        "type": "String",
                        "sourceField": "ITEM_ID"
                    },
                    "_NAME": {
                        "type": "String",
                        "sourceField": "PRODUCT_NAME"
                    },
                    "_PRICE": {
                        "type": "Float",
                        "sourceField": "PRICE_VAT"
                    },
                    "_URL": {
                        "type": "String",
                        "sourceField": "URL"
                    },
                    "_IMAGE": {
                        "type": "String",
                        "sourceField": "IMGURL"
                    },
                    "_CATEGORY": {
                        "type": "String",
                        "sourceField": "CATEGORY"
                    },
                    "_HIERARCHY": {
                        "type": "String",
                        "sourceField": "HIERARCHY"
                    } 
              }
           }
        }
        
+ Response 200 (application/json)

        {
            "name": "My Account Name",
            "productImports": {
                "XMLFeedURL": "http://eshop2.com/export/xml/persoo.xml",
                "fieldsMapping": {
                    "_ID": {
                        "type": "String",
                        "sourceField": "ITEM_ID"
                    },
                    "_NAME": {
                        "type": "String",
                        "sourceField": "PRODUCT_NAME"
                    },
                    "_PRICE": {
                        "type": "Float",
                        "sourceField": "PRICE_VAT"
                    },
                    "_URL": {
                        "type": "String",
                        "sourceField": "URL"
                    },
                    "_IMAGE": {
                        "type": "String",
                        "sourceField": "IMGURL"
                    },
                    "_CATEGORY": {
                        "type": "String",
                        "sourceField": "CATEGORY"
                    },
                    "_HIERARCHY": {
                        "type": "String",
                        "sourceField": "HIERARCHY"
                    } 
                }
            }
        }


# Group Scenarios
Scenarios is set of products ids composed of several algorithms.

## Scenarios Collection [/accounts/{account_id}/recommendations/scenarios]

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions

### listRecommendationScenarios [GET]
List all Scenarios.

+ Response 200 (application/json)

        [
            {
                "id": "53c3dbdd72585e32f7503347",
                "name": "Best Sellers",
                "isActive": true,
                "variants": [
                    {
                        "id": "0",
                        "name": "<variant name>",
                        "condition": true,
                        "template": "<html template>",
                        "location": {
                             "selectorClass": "query",
                             "selector": "#tab .products",
                             "mode": "Replace",
                             "onPageType": "Category",
                             "onURL": "<regExp>"
                        },
                        "logic": {
                            "count": 10,
                            "fallbacks": [
                                {
                                   "ref": "53c3dbdd72585e32f7504477"
                                },
                                {
                                   "ref": "53c3drdd72585e32f7508521"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "id": "53c3drdd72585e32f7504147",
                "name": "Similar products",
                "isActive": true,
                "variants": [
                    {
                        "id": "0",
                        "name": "<variant name>",
                        "condition": true,
                        "template": "<html template>",
                        "location": {
                             "selectorClass": "query",
                             "selector": "#tab .products",
                             "mode": "Replace",
                             "onPageType": "Category",
                             "onURL": "<regExp>"
                        },
                        "logic": {
                            "count": 10,
                            "fallbacks": [
                                {
                                   "ref": "53c3dbdd72585e32f7504477"
                                },
                                {
                                   "ref": "53c3drdd72585e32f7508521"
                                }
                            ]
                        }
                    }
                ]
            }
        ]

### createRecommendationScenario [POST]
Create new Scenario.
+ Request (application/json)

        { 
            "name": "Best sellers", 
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": true,
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "Replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7508888",
            "name": "Best sellers", 
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": true,
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "Replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }

## Scenario [/accounts/{account_id}/recommendations/scenarios/{scenario_id}]
A single scenario object with all its details.

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... apiKey to which do you want to perform actions
    + scenario_id (required, string, `53c3dbdd72585e32f7503347`) ... Hash string  `id` of the Scenario to perform action with.

### getRecommendationScenario [GET]
Retrieve a scenario.

+ Response 200 (application/json)

        {
            "id": "53c3dbdd72585e32f7503347",
            "name": "Best Sellers",
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": true,
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "Replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }


### updateRecommendationScenario [PUT]
Update a scenario.

+ Request (application/json)

        {
            "id": "53c3dbdd72585e32f7503347",
            "name": "Best Sellers",
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": true,
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "Replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 200 (application/json)

        {
            "id": "53c3dbdd72585e32f7503347",
            "name": "Best Sellers",
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": true,
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "Replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }


### deleteRecommendationScenario [DELETE]
Delete a scenario.

+ Response 204

+ Response 404

        { 
            "error": "Resource not found"
        }



# Group Algorithms
Algorithms is base recommendation computation logic.

## Algorithms Collection [/accounts/{account_id}/recommendations/algorithms]

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions

### listRecommendationAlgorithms [GET]
List all Algorithms.
+ Response 200 (application/json)

        [
            {
                "id": "53c3dbdd72585e32f7504477", 
                "name": "Algorithm 1", 
                "config": {}
            },
            {
                "id": "53c3drdd72585e32f7508521", 
                "name": "Algorithm 2", 
                "config": {}
            },
            {
                "id": "6644drdd72585e32f7508885", 
                "name": "Algorithm 3", 
                "config": {}
            },
            {
                "id": "0124drdd72585e32f7501000", 
                "name": "Algorithm 4", 
                "config": {}
            }
            
        ]

### createRecommendationAlgorithm [POST]
Create new Algorithm.
+ Request (application/json)

        { "name": "Algorithm 3" }

+ Response 201 (application/json)

        { "id": "53c3dbdd72585e32f7507777", "name": "Algorithm 3" }

## Algorithm [/accounts/{account_id}/recommendations/algorithms/{algorithm_id}]
A single Algorithm object with all its details

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions
    + algorithm_id (required, string, `53c3dbdd72585e32f7503347`) ... Hash string  `id` of the Algorithm to perform action with.

### getRecommendationAlgorithm [GET]
Retrieve an Algorithm.
+ Response 200 (application/json)

        { 
            "id": "53c3dbdd72585e32f7507777", 
            "name": "Algorithm 3",
            "class": "productSearch",
            "config": {
                "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                "mustNot": ["anotherAlgorithmFilter"],
                "should": [
                    { "ref": "alsoBought", "value": "0" }
                ]
            } 
        }



### updateRecommendationAlgorithm [PUT]
Update an Algorithm.
+ Request (application/json)

        { "id": "53c3dbdd72585e32f7507777", "name": "Algorithm new" }
        
+ Response 200 (application/json)

        { "id": "53c3dbdd72585e32f7507777", "name": "Algorithm new" }

### deleteRecommendationAlgorithm [DELETE]
Delete an Algorithm.
+ Response 200

+ Response 404

        { 
            "error": "Resource not found"
        }
