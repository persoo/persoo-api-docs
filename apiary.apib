FORMAT: 1A
HOST: http://api.persoo.cz

# Persoo administration API
API for configuring Persoo accounts.

## Allowed HTTP requests

- `POST` - Creates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or a list of resources
- `DELETE` - Deletes a resource

## Typical server responses

- 200 `OK` - The request was successful (some API calls may return 201 or 204 instead).
- 201 `Created` - The request was successful, and a resource was created.
- 204 `No Content` - The request was successful, but no content is returned.
- 400 `Bad Request` - The request wasn't understood or was missing the required parameters.
- 401 `Unauthorized` - Authentication token is invalid or has expired. (Try logging in again.)
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - The requested resource wasn't found.

## Error reporting

Error responses (status 4xx/ 5xx) contain a detailed description of the error(s) in the following manner:
```
{
    "errors": [
        {
            "message": "Unauthorized."
        }
    ]
}
```
```
{
    "errors": [
        {
            "message": "Config structure validation: Field 'adminConfig.settings.productImport' missing.",
            "path": ["adminConfig", "settings", "productImport"]
        },
        {
            "message": "Config structure validation: Field 'adminConfig.settings.credentials[2]' isn't of type 'object'."
            "path": ["adminConfig", "settings", "credentials", 2]
        }
    ]
}
```
```
{
    "errors": [
        {
            "message": "Internal server error (ID f6429320a53711e4b0780002a5d5c51b)."
        }
    ]
}
```

# Group User
The users are owners of accounts. Each users have unique credentials to access in system.

TODO - Dodělat, představa je taková, že requesty budeme jen přeposílat persoo-config-unitě. V reálu budou nejspíš metody trochu jiné, nebude to umět tolik, ale zhruba to tak bude.

## Login [/login]
### login [POST]
V hlavičce odpovědi nastaví cookie tak, aby další requesty mohly probíhat bez zásahu (autentizace se bere z cookie).
Token vyprší po půl hodině. S každým requestem může v odpovědi přijít aktualizovaný token.

+ Request (application/json)

    + Body
    
            {
                "username":"user@email.com",
                "passwordHash":"passwordHash"
            }

+ Response 204

    + Headers
    
            Set-Cookie:  expires=Mon, 30-Jul-2014 09:12:42 GMT; persooAuthToken={token};

+ Response 401

## Logout [/logout]
### logout [POST]
Delete cookie with token.
+ Request

    + Headers
    
            Cookie: persooAuthToken={token};
            
+ Response 204

    + Headers
    
            Set-Cookie:  expires=Thu, 01 Jan 1970 00:00:01 GMT persooAuthToken={token};

## Users [/users/{username}]
A user's details.

+ Parameters

    + username (required, string, `test@email.com`) ... username to which do you want to perform actions. "current" can be used for the user logged in.


### getUser [GET]
Retrieve the user details by username or 'current' for currently logged user.
+ Response 200 (application/json)

        {
            "username": "test@email.com"
        }

## Change password [/users/{username}/password]

+ Parameters

    + username (required, string, `test@email.com`) ... username to which do you want to perform actions. "current" can be used for the user logged in.


### changePassword [POST]
Change password by username or 'current' for currently logged user.

+ Request (application/json)

        {
            "passwordHash": "4f4dcc3b5aa765d61d8327deb882cf88"
            "newPasswordHash": "5f4dcc3b5aa765d61d8327deb882cf99"
        }
        
+ Response 204
+ Response 403


# Group Account
User Account is start point in Persoo. Every User can have many Account and each account have own Scenarios and Algorithms
(Every account have unique ID = apikey)

## Account Collection [/accounts]
### listAccounts [GET]
Složitější metoda, potřebuje to klient - možná z toho uděláme nějakou obecnou metodu na získání všech informací důležitých pro uživatele globálně.

+ Response 200 (application/json)

        [
            {
                "id": "53ba7fc872530e577f35c699", 
                "name": "www.persoo.cz"
            },
            {
                "id": "53c3dbdd72530e32f7503347", 
                "name": "demo.persoo.cz"
            }
        ]

### newAccount [POST]
Create a new account.
+ Request (application/json)

        {
            "name": "My account"
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7508888",
            "name": "My account"
        }

## Account [/accounts/{account_id}]
A single account object with basic data

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions

### deleteAccount [DELETE]
Delete the account.
+ Response 204

+ Response 404

        { 
            "error": "Account not found"
        }

## Account settings [/accounts/{account_id}/settings]
A single account settings

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions


### getAccountSettings [GET]
Retrieve an account settings.
+ Response 200 (application/json)

        {
            "name": "MyAccount",
            "productImports": {
                "sourceURL": "http://eshop.com/export/xml/persoo.xml",
                "fieldsMapping" : {
                    "id" : {
                            "sourceField" : "id",
                            "type" : "string"
                    },
                    "title" : {
                            "sourceField" : "title",
                            "type" : "string"
                    },
                    "price" : {
                            "sourceField" : "price",
                            "type" : "double"
                    }
                },
                "customFieldsMapping" : {
                    "COLOR" : {
                            "sourceField" : "COLOR",
                            "type" : "string"
                    },
                    "AVAILABLE" : {
                            "sourceField" : "AVAILABLE",
                            "type" : "int"
                    },
                    "NOVINKA" : {
                            "sourceField" : "NOVINKA",
                            "type" : "string"
                    }
                },
                "javascriptPreprocessor": "function process(item) { return item; }"
            }
        }
        
        
### updateAccountSettings [PUT]
Update the account settings.
+ Request (application/json)

        {
            "name": "My Account Name",
            "productImports": {
                "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
                "fieldsMapping" : {
                    "id" : {
                            "sourceField" : "id",
                            "type" : "string"
                    },
                    "title" : {
                            "sourceField" : "title",
                            "type" : "string"
                    },
                    "price" : {
                            "sourceField" : "price",
                            "type" : "double"
                    }
                },
                "customFieldsMapping" : {
                    "COLOR" : {
                            "sourceField" : "COLOR",
                            "type" : "string"
                    },
                    "AVAILABLE" : {
                            "sourceField" : "AVAILABLE",
                            "type" : "int"
                    },
                    "NOVINKA" : {
                            "sourceField" : "NOVINKA",
                            "type" : "string"
                    }
                },
                "javascriptPreprocessor": "function process(item) { return item; }"
           }
        }
        
+ Response 200 (application/json)

        {
            "name": "My Account Name",
            "productImports": {
                "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
                "fieldsMapping" : {
                    "id" : {
                            "sourceField" : "id",
                            "type" : "string"
                    },
                    "title" : {
                            "sourceField" : "title",
                            "type" : "string"
                    },
                    "price" : {
                            "sourceField" : "price",
                            "type" : "double"
                    }
                },
                "customFieldsMapping" : {
                    "COLOR" : {
                            "sourceField" : "COLOR",
                            "type" : "string"
                    },
                    "AVAILABLE" : {
                            "sourceField" : "AVAILABLE",
                            "type" : "int"
                    },
                    "NOVINKA" : {
                            "sourceField" : "NOVINKA",
                            "type" : "string"
                    }
                },
                "javascriptPreprocessor": "function process(item) { return item; }"
            }
        }


# Group Imports
Importing data (items, categories, ...) from external URLs.

## Import Settings [/accounts/{account_id}/imports/{import_id}]

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions
    + import_id (required, string, `items`) ... either "items" or "categories"

### getImportSettings [GET]
Retrieve import settings.

+ Response 200 (application/json)

        {
            "sourceURL": "http://eshop.com/export/xml/persoo.xml",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

### updateImportSettings [PUT]
Update import settings.
+ Request (application/json)

        {
            "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

+ Response 200 (application/json)

        {
            "sourceURL": "http://eshop2.com/export/xml/persoo.xml",
            "fieldsMapping" : {
                "id" : {
                        "sourceField" : "id",
                        "type" : "string"
                },
                "title" : {
                        "sourceField" : "title",
                        "type" : "string"
                },
                "price" : {
                        "sourceField" : "price",
                        "type" : "double"
                }
            },
            "customFieldsMapping" : {
                "COLOR" : {
                        "sourceField" : "COLOR",
                        "type" : "string"
                },
                "AVAILABLE" : {
                        "sourceField" : "AVAILABLE",
                        "type" : "int"
                },
                "NOVINKA" : {
                        "sourceField" : "NOVINKA",
                        "type" : "string"
                }
            },
            "javascriptPreprocessor": "function process(item) { return item; }"
        }

## Run Import [/accounts/{account_id}/imports/{import_id}/run]

+ Parameters
    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions
    + import_id (required, string, `items`) ... either "items" or "categories"

### runImport [POST]
Run import.

+ Response 200 (application/json)
    
        {
            "run": "OK"
        }

## Get Import Status [/accounts/{account_id}/imports/{import_id}/status]

+ Parameters
    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions
    + import_id (required, string, `items`) ... either "items" or "categories"

### ImportStatus [GET]
Get import status:
* status is 
 * "green" - last import was OK, 
 * "yellow" - last import had problem, but previous/yesterdays import was OK, maybe source URL was down because of server updates, etc.
 * "red" - 2 or more last imports had problems
* lastSuccessTimestamp - timestamp of last successful import
* lastSuccessDate - human readable date of last successful import
* history of at most 10 imports with detailed log message

+ Response 200 (application/json)

        {
            "status": "green",
            "lastSuccessTimestamp": 1420034938343,
            "lastSuccessDate": "2014-01-23",
            "history": [
                {
                    "timestamp": 1422034938343,
                    "status": "pending",
                    "requestID": "209e6be2-8488-4e99-ab9f-3620848cf1d2",
                    "log": "<some data, error messages, ....>"
                },
                {
                    "timestamp": 1421034938343,
                    "status": "pending",
                    "requestID": "199e6be2-8488-4e99-ab9f-3620848cf1c2",
                    "log": "<some data, error messages, ....>"
                },
                {
                    "timestamp": 1420034938343,
                    "status": "OK",
                    "requestID": "309e6be2-8488-4e99-ab9f-3620848cdf1c",
                    "log": "<some data, error messages, ....>"
                },
                {
                    "timestamp": 1419034938343,
                    "status": "error",
                    "requestID": "449e6be2-8488-4e99-ab9f-36201c2848cf",
                    "log": "<some data, error messages, ....>"
                },
                {
                    "timestamp": 1418034938343,
                    "status": "OK",
                    "requestID": "929e6be2-8488-4e99-ab9f-3620848c2cf1",
                    "log": "<some data, error messages, ....>"
                }
            ]
        }


# Group Scenarios
Scenarios is set of products ids composed of several algorithms.

## Scenarios Collection [/accounts/{account_id}/recommendations/scenarios]

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions

### listRecommendationScenarios [GET]
List all Scenarios.

+ Response 200 (application/json)

        [
            {
                "id": "53c3dbdd72585e32f7503347",
                "name": "Best Sellers",
                "isActive": true,
                "variants": [
                    {
                        "id": "0",
                        "name": "<variant name>",
                        "condition": "true",
                        "template": "<html template>",
                        "location": {
                             "selectorClass": "query",
                             "selector": "#tab .products",
                             "mode": "replace",
                             "onPageType": "Category",
                             "onURL": "<regExp>"
                        },
                        "logic": {
                            "count": 10,
                            "fallbacks": [
                                {
                                   "ref": "53c3dbdd72585e32f7504477"
                                },
                                {
                                   "ref": "53c3drdd72585e32f7508521"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "id": "53c3drdd72585e32f7504147",
                "name": "Similar products",
                "isActive": true,
                "variants": [
                    {
                        "id": "0",
                        "name": "<variant name>",
                        "condition": "true",
                        "template": "<html template>",
                        "location": {
                             "selectorClass": "query",
                             "selector": "#tab .products",
                             "mode": "replace",
                             "onPageType": "Category",
                             "onURL": "<regExp>"
                        },
                        "logic": {
                            "count": 10,
                            "fallbacks": [
                                {
                                   "ref": "53c3dbdd72585e32f7504477"
                                },
                                {
                                   "ref": "53c3drdd72585e32f7508521"
                                }
                            ]
                        }
                    }
                ]
            }
        ]

### newRecommendationScenario [POST]
Create new Scenario.
+ Request (application/json)

        { 
            "name": "New Scenario", 
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7508888",
            "name": "New Scenario", 
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }

## Scenario [/accounts/{account_id}/recommendations/scenarios/{scenario_id}]
A single scenario object with all its details.

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... apiKey to which do you want to perform actions
    + scenario_id (required, string, `53c3dbdd72585e32f7503347`) ... Hash string  `id` of the Scenario to perform action with.

### getRecommendationScenario [GET]
Retrieve a scenario.

+ Response 200 (application/json)

        {
            "id": "53c3dbdd72585e32f7503347",
            "name": "Best Sellers",
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }


### updateRecommendationScenario [PUT]
Update a scenario.

JSON may contain field "id", which is ignored. ID is taken from request pathname.

+ Request (application/json)

        {
            "id": "53c3dbdd72585e32f7503347",
            "name": "Best Sellers",
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }
        
+ Response 200 (application/json)

        {
            "id": "53c3dbdd72585e32f7503347",
            "name": "Best Sellers",
            "isActive": true,
            "variants": [
                {
                    "id": "0",
                    "name": "<variant name>",
                    "condition": "true",
                    "template": "<html template>",
                    "location": {
                         "selectorClass": "query",
                         "selector": "#tab .products",
                         "mode": "replace",
                         "onPageType": "Category",
                         "onURL": "<regExp>"
                    },
                    "logic": {
                        "count": 10,
                        "fallbacks": [
                            {
                               "ref": "53c3dbdd72585e32f7504477"
                            },
                            {
                               "ref": "53c3drdd72585e32f7508521"
                            }
                        ]
                    }
                }
            ]
        }


### deleteRecommendationScenario [DELETE]
Delete a scenario.

+ Response 204

+ Response 404

        { 
            "error": "Resource not found"
        }



# Group Algorithms
Algorithms is base recommendation computation logic.

## Algorithms Collection [/accounts/{account_id}/recommendations/algorithms]

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions

### listRecommendationAlgorithms [GET]
List all Algorithms.
+ Response 200 (application/json)

        [
            {
                "id": "53c3dbdd72585e32f7504477", 
                "name": "Algorithm 1", 
                "class": "ProductSearch",
                "config": {
                    "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                    "mustNot": ["anotherAlgorithmFilter"],
                    "should": [
                        { "ref": "alsoBought", "value": "0" }
                    ]
                }
            },
            {
                "id": "53c3drdd72585e32f7508521", 
                "name": "Algorithm 2",
                "class": "lastViewed",
                "config": {}
            },
            {
                "id": "6644drdd72585e32f7508885", 
                "name": "Algorithm 3",
                "class": "custom",
                "config": {
                    "customKey1": "customValue1",
                    "customKey2": "customValue2"
                }
            },
            {
                "id": "0124drdd72585e32f7501000", 
                "name": "Algorithm 4",
                "class": "custom",
                "config": {}
            }
        ]

### newRecommendationAlgorithm [POST]
Create new Algorithm.
+ Request (application/json)

        { 
            "name": "Algorithm 3",
            "class": "ProductSearch",
            "config": {
                "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                "mustNot": ["anotherAlgorithmFilter"],
                "should": [
                    { "ref": "alsoBought", "value": "0" }
                ]
            } 
        }

+ Response 201 (application/json)

        {
            "id": "53c3dbdd72585e32f7507777",
            "name": "Algorithm 3",
            "class": "ProductSearch",
            "config": {
                "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                "mustNot": ["anotherAlgorithmFilter"],
                "should": [
                    { "ref": "alsoBought", "value": "0" }
                ]
            } 
        }

## Algorithm [/accounts/{account_id}/recommendations/algorithms/{algorithm_id}]
A single Algorithm object with all its details

+ Parameters

    + account_id (required, string, `53c3dbdd72585e32f7503347`) ... to which do you want to perform actions
    + algorithm_id (required, string, `53c3dbdd72585e32f7503347`) ... Hash string  `id` of the Algorithm to perform action with.

### getRecommendationAlgorithm [GET]
Retrieve an Algorithm.
+ Response 200 (application/json)

        { 
            "id": "53c3dbdd72585e32f7507777", 
            "name": "Algorithm 3",
            "class": "ProductSearch",
            "config": {
                "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                "mustNot": ["anotherAlgorithmFilter"],
                "should": [
                    { "ref": "alsoBought", "value": "0" }
                ]
            } 
        }

### updateRecommendationAlgorithm [PUT]
Update an Algorithm.
+ Request (application/json)

        { 
            "id": "53c3dbdd72585e32f7507777", 
            "name": "Algorithm 3",
            "class": "ProductSearch",
            "config": {
                "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                "mustNot": ["anotherAlgorithmFilter"],
                "should": [
                    { "ref": "alsoBought", "value": "0" }
                ]
            } 
        }
        
+ Response 200 (application/json)

        { 
            "id": "53c3dbdd72585e32f7507777", 
            "name": "Algorithm 3",
            "class": "ProductSearch",
            "config": {
                "must": ["categoryMatchCurrentCategory", "productIsCurrentProduct"],
                "mustNot": ["anotherAlgorithmFilter"],
                "should": [
                    { "ref": "alsoBought", "value": "0" }
                ]
            } 
        }

### deleteRecommendationAlgorithm [DELETE]
Delete an Algorithm.
+ Response 200

+ Response 404

        { 
            "error": "Resource not found"
        }
